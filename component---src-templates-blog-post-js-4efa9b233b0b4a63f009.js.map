{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/components/fundation.component.js","webpack:///./src/components/profile-pic.jpg","webpack:///./src/components/tableOfContents.js","webpack:///./src/components/useLanguage.js","webpack:///./src/components/seo.js","webpack:///./src/components/availableLanguages.js","webpack:///./src/components/editOnGithub.js","webpack:///./src/components/blogPostMarkup.js","webpack:///./src/templates/blog-post.js"],"names":["Bio","render","children","this","props","style","display","marginBottom","rhythm","src","profilePic","alt","marginRight","width","height","React","Component","Logo","styled","Img","TextWrapper","div","Blocquote","blockquote","Link","OutboundLink","textByLang","fr","text","quote","en","Fundation","lang","logo","useStaticQuery","target","href","fixed","img","childImageSharp","module","exports","Aside","aside","Heading","header","TableOfContents","tableOfContents","dangerouslySetInnerHTML","__html","useLanguage","langCompleteByLang","SEO","description","meta","title","image","translations","slug","type","dateJson","tags","site","slugByLang","allMarkdownRemark","edges","reduce","accumulator","node","frontmatter","language","fields","metaDescription","join","siteMetadata","imageTags","translationTags","metaTranslationTags","property","content","siteUrl","name","push","forEach","tag","i","length","rel","hreflang","htmlAttributes","prefix","head","link","titleTemplate","social","twitter","concat","defaultProps","Container","AvailableLanguages","data","option","find","language_option","map","translationLink","translationIndex","findIndex","v","key","boxShadow","textDecoration","to","hrefLang","language_label","Wrapper","EditOnGithub","repository","BlogPostMarkup","post","_get","image16x9","image4x3","image1x1","headline","editor","genre","wordcount","wordCount","words","url","mainEntityOfPage","datePublished","dateCreated","dateModified","articleBody","html","keywords","author","publisher","PostContent","RelatedPost","BlogPostTemplate","pageContext","previous","next","location","markdownRemark","siteBio","get","excerpt","config","hero","color","headings","scale","marginTop","dateTime","date","marginLeft","fluid","relatedPosts","margin","role","aria-label","timeToRead"],"mappings":"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","file":"component---src-templates-blog-post-js-4efa9b233b0b4a63f009.js","sourcesContent":["import React from 'react'\n\n// Import typefaces\nimport 'typeface-montserrat'\nimport 'typeface-merriweather'\n\nimport profilePic from './profile-pic.jpg'\nimport { rhythm } from '../utils/typography'\n\nclass Bio extends React.Component {\n  render() {\n    const { children } = this.props\n    return (\n      <div\n        style={{\n          display: 'flex',\n          marginBottom: rhythm(2.5),\n        }}\n      >\n        <img\n          src={profilePic}\n          alt={`Antoine Caron`}\n          style={{\n            marginRight: rhythm(1 / 2),\n            marginBottom: 0,\n            width: rhythm(2),\n            height: rhythm(2),\n          }}\n        />\n        {children}\n      </div>\n    )\n  }\n}\n\nexport default Bio\n","import React from 'react'\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { OutboundLink } from 'gatsby-plugin-google-analytics'\n\nconst Logo = styled(Img)`\n  flex-shrink: 0;\n  transition: filter 100ms ease-in-out;\n`\n\nconst TextWrapper = styled.div`\n  flex-grow: 1;\n  margin-left: 1rem;\n`\n\nconst Blocquote = styled.blockquote`\n  border: none;\n`\n\nconst Link = styled(OutboundLink)`\n  display: flex;\n  color: var(--textNormal);\n  box-shadow: none;\n\n  &:hover,\n  &:focus {\n    ${Logo} {\n      filter: drop-shadow(5px 5px 3px white);\n    }\n\n    ${TextWrapper} {\n      text-decoration: underline;\n    }\n  }\n`\n\nconst textByLang = {\n  fr: {\n    text:\n      \"Si vous aimez le contenu de ce blog, ou bien qu'il vous a aidé, s'il vous plait, considérez donner à la fondation Abbé Pierre que je soutiens personnellement.\",\n    quote:\n      '“On n’est jamais heureux que dans le bonheur qu’on donne. Donner, c’est recevoir.”',\n  },\n  en: {\n    text:\n      'If you like some content of this blog, or it has helped you, please consider donating to the Abbé Pierre Foundation which I personally support.',\n    quote:\n      '\"We are only ever happy in the happiness we give. To give is to receive.\"',\n  },\n}\n\nexport const Fundation = ({ lang = 'en' }) => {\n  const logo = useStaticQuery(graphql`\n    {\n      img: file(\n        relativePath: { eq: \"abbe_pierre.jpeg\" }\n        sourceInstanceName: { eq: \"static_images\" }\n      ) {\n        childImageSharp {\n          fixed(quality: 60, height: 150) {\n            ...GatsbyImageSharpFixed_withWebp\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Link target=\"_blank\" href=\"https://www.fondation-abbe-pierre.fr/\">\n      <Logo\n        fixed={logo.img.childImageSharp.fixed}\n        alt=\"logo de la fondation abbé pierre\"\n      />\n      <TextWrapper>\n        {textByLang[lang].text}\n        <br />\n        <Blocquote>{textByLang[lang].quote}</Blocquote>\n      </TextWrapper>\n    </Link>\n  )\n}\n","module.exports = __webpack_public_path__ + \"static/profile-pic-6015f9a66916f3d0b4678826cc46ec6c.jpg\";","import React from 'react'\nimport styled from 'styled-components'\n\nconst Aside = styled.aside`\n  display: none;\n  width: 400px;\n\n  nav {\n    margin-left: 0.5rem;\n    overflow: auto;\n    max-height: 80vh;\n  }\n\n  ul {\n    list-style: none;\n  }\n\n  li {\n    margin-bottom: 0.5rem;\n    overflow: hidden;\n    white-space: nowrap;\n    ,wordwrap: normal;\n    text-overflow: ellipsis;\n  }\n\n  li > ul {\n    margin-top: 0;\n    margin-left: 1rem;\n  }\n\n  a {\n    color: currentColor;\n    box-shadow: none;\n  }\n\n  a:hover {\n    box-shadow: 0 1px 0 0 currentColor;\n  }\n\n  @media screen and (min-width: 1500px) {\n    & {\n      display: block;\n      position: fixed;\n      top: 7rem;\n      right: 2rem;\n      font-size: 0.8rem;\n    }\n  }\n`\n\nconst Heading = styled.header`\n  margin-bottom: 0.8rem;\n  font-weight: bold;\n  font-size: 1.1rem;\n`\n\nexport const TableOfContents = ({ tableOfContents }) => {\n  return (\n    <Aside>\n      <Heading>Table of content</Heading>\n      <nav dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n    </Aside>\n  )\n}\n","import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useLanguage = () =>\n  useStaticQuery(graphql`\n    query LanguageSwitcherQuery {\n      allMarkdownRemark(filter: { frontmatter: { type: { eq: \"language\" } } }) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              language\n              language_label\n              language_option\n            }\n          }\n        }\n      }\n    }\n  `)\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { useLanguage } from './useLanguage'\n\nconst langCompleteByLang = {\n  fr: 'fr_FR',\n  en: 'en_US',\n}\n\nconst SEO = ({\n  description,\n  lang,\n  meta,\n  title,\n  image,\n  translations,\n  slug,\n  type = 'website',\n  dateJson,\n  tags = [],\n}) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n  const langs = useLanguage()\n  const slugByLang = langs.allMarkdownRemark.edges.reduce(\n    (accumulator, { node }) => {\n      accumulator[node.frontmatter.language] = node.fields.slug\n      return accumulator\n    },\n    {}\n  )\n\n  const metaDescription =\n    `${description} ${(tags || []).join(', ')}` || site.siteMetadata.description\n  let imageTags = []\n  let translationTags = []\n  let metaTranslationTags = []\n\n  if (image) {\n    imageTags = [\n      {\n        property: 'og:image',\n        content: site.siteMetadata.siteUrl + image.src,\n      },\n      {\n        name: 'twitter:image',\n        content: site.siteMetadata.siteUrl + image.src,\n      },\n      {\n        property: 'og:image:alt',\n        content: title,\n      },\n      {\n        property: 'og:image:width',\n        content: 1080,\n      },\n      {\n        property: 'og:image:type',\n        content: 'image/jpeg',\n      },\n    ]\n  }\n\n  if (type === 'article') {\n    imageTags.push({\n      property: 'article:author',\n      content: 'Antoine Caron',\n    })\n    imageTags.push({\n      property: 'article:section',\n      content: 'Frontend Tech',\n    })\n\n    if (tags) {\n      tags.forEach(tag => {\n        imageTags.push({\n          property: 'article:tag',\n          content: tag,\n        })\n      })\n    }\n  }\n\n  if (translations) {\n    for (let i = 0; i < translations.length; i += 2) {\n      translationTags.push({\n        rel: 'alternate',\n        hreflang: translations[i],\n        href: `${slugByLang[translations[i]]}${translations[i + 1]}`,\n      })\n      metaTranslationTags.push({\n        property: 'og:locale:alternate',\n        content: langCompleteByLang[translations[i]],\n      })\n    }\n    translationTags.push({\n      rel: 'alternate',\n      hreflang: lang,\n      href: `${slug}`,\n    })\n  }\n\n  if (dateJson) {\n    imageTags.push({\n      property: 'article:published_time',\n      content: dateJson,\n    })\n  }\n\n  if (tags) {\n    imageTags.push({\n      name: 'keywords',\n      content: tags,\n    })\n  }\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n        prefix:\n          'og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#',\n      }}\n      head\n      title={title}\n      link={translationTags}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        ...metaTranslationTags,\n        {\n          property: 'og:site_name',\n          content: 'Antoine Caron',\n        },\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: 'og:url',\n          content: `${site.siteMetadata.siteUrl}${slug}`,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: type,\n        },\n        {\n          property: 'og:locale',\n          content: langCompleteByLang[lang],\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        ...imageTags,\n        {\n          name: 'google-site-verification',\n          content: 'h1uQ_z8fdlLI60AmxP8vjy1H-bKSDlv0n5XolWfeDIo',\n        },\n        {\n          property: 'fb:app_id',\n          content: '235346886871248',\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n  tags: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.object,\n  tags: PropTypes.array,\n}\n\nexport default SEO\n","import { useLanguage } from './useLanguage'\nimport { Link } from 'gatsby'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  padding: 1rem;\n  margin: 2rem 0;\n  font-weight: bold;\n  background-color: hsla(268, 53%, 51%, 30%);\n  border-radius: 0.75rem;\n  border: solid hsla(268, 53%, 51%) 1px;\n`\n\nexport const AvailableLanguages = ({ language, translations }) => {\n  const data = useLanguage()\n  const option = data.allMarkdownRemark.edges.find(\n    ({ node }) => node.frontmatter.language == language\n  ).node.frontmatter.language_option\n\n  return translations ? (\n    <Container>\n      {option}:{' '}\n      {data.allMarkdownRemark.edges.map(({ node }) => {\n        if (node.frontmatter.language == language) {\n          return\n        } else {\n          let translationLink = node.fields.slug\n          if (translations) {\n            const translationIndex = translations.findIndex(\n              v => v == node.frontmatter.language\n            )\n            if (translationIndex !== -1) {\n              translationLink += translations[translationIndex + 1]\n            }\n          }\n          return (\n            <Link\n              key={translationLink}\n              style={{\n                boxShadow: 'none',\n                textDecoration: 'none',\n              }}\n              to={translationLink}\n              hrefLang={node.frontmatter.language}\n            >\n              {node.frontmatter.language_label}\n            </Link>\n          )\n        }\n      })}\n    </Container>\n  ) : null\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Wrapper = styled.div`\n  margin-bottom: 1rem;\n`\n\nexport const EditOnGithub = ({ slug }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          repository\n        }\n      }\n    }\n  `)\n\n  return (\n    <Wrapper>\n      <a\n        href={`${repository}/edit/source/src/pages${slug}index.md`}\n        target=\"_blank\"\n      >\n        Edit this page on Github\n      </a>\n    </Wrapper>\n  )\n}\n","import React from 'react'\nimport _get from 'lodash/get'\nimport { JsonLd } from './jsonLd'\nimport profilePic from './profile-pic.jpg'\n\nexport const BlogPostMarkup = ({ post, slug, siteUrl }) => {\n  const image = _get(post, 'frontmatter.hero.childImageSharp', {\n    image16x9: {},\n    image4x3: {},\n    image1x1: {},\n  })\n  return (\n    <JsonLd\n      content={{\n        '@context': 'http://schema.org',\n        '@type': 'Article',\n        headline: post.frontmatter.title,\n        editor: 'Antoine Caron',\n        genre: 'Tech Blog',\n        wordcount: post.wordCount.words,\n        url: `${siteUrl}${slug}`,\n        mainEntityOfPage: `${siteUrl}${slug}`,\n        datePublished: post.frontmatter.dateJson,\n        dateCreated: post.frontmatter.dateJson,\n        dateModified: post.frontmatter.dateJson,\n        description: post.frontmatter.description,\n        articleBody: post.html,\n        image: [\n          `${siteUrl}${image.image16x9.src}`,\n          `${siteUrl}${image.image4x3.src}`,\n          `${siteUrl}${image.image1x1.src}`,\n        ],\n        keywords: post.frontmatter.tags,\n        author: {\n          '@type': 'Person',\n          name: 'Antoine Caron',\n        },\n        publisher: {\n          '@type': 'Organization',\n          name: 'Antoine Caron',\n          logo: {\n            '@type': 'ImageObject',\n            url: `${siteUrl}${profilePic}`,\n          },\n        },\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport get from 'lodash/get'\nimport Img from 'gatsby-image'\nimport styled from 'styled-components'\n\nimport Bio from '../components/bio'\nimport { Layout } from '../components/layout'\nimport { rhythm, scale } from '../utils/typography'\nimport { TableOfContents } from '../components/tableOfContents'\nimport SEO from '../components/seo'\nimport { AvailableLanguages } from '../components/availableLanguages'\nimport { EditOnGithub } from '../components/editOnGithub'\nimport { BlogPostMarkup } from '../components/blogPostMarkup'\nimport { Fundation } from '../components/fundation.component'\n\nconst PostContent = styled.div`\n  margin-top: 2rem;\n`\n\nconst RelatedPost = styled.div`\n  margin-left: 1rem;\n`\n\nexport default function BlogPostTemplate({\n  data,\n  pageContext: { previous, next, slug, language },\n  location,\n}) {\n  const post = data.markdownRemark\n  const siteTitle = get(data, `config.frontmatter.title`)\n  const siteBio = get(data, 'config.html')\n  const siteDescription = post.excerpt\n\n  return (\n    <Layout\n      location={location}\n      config={data.config}\n      translations={post.frontmatter.translations}\n    >\n      <SEO\n        type=\"article\"\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n        lang={post.frontmatter.language}\n        translations={post.frontmatter.translations}\n        image={\n          post.frontmatter.hero\n            ? post.frontmatter.hero.childImageSharp.image\n            : null\n        }\n        slug={slug}\n        dateJson={post.frontmatter.dateJson}\n        tags={post.frontmatter.tags}\n      />\n      <h1 style={{ color: 'var(--header)' }}>{post.frontmatter.title}</h1>\n      {post.headings.length > 1 && (\n        <TableOfContents tableOfContents={post.tableOfContents} />\n      )}\n      <div\n        style={{\n          ...scale(-1 / 5),\n          marginBottom: rhythm(1),\n          marginTop: rhythm(-1),\n        }}\n      >\n        <time dateTime={post.frontmatter.dateJson}>\n          {post.frontmatter.date}\n        </time>\n        <small style={{ marginLeft: '1rem' }}>\n          {(post.frontmatter.tags || []).map(tag => (\n            <Link\n              style={{ marginRight: '0.5rem' }}\n              key={tag}\n              to={`/${language}/${tag}`}\n            >\n              #{tag}\n            </Link>\n          ))}\n        </small>\n      </div>\n\n      <AvailableLanguages\n        language={language}\n        translations={post.frontmatter.translations}\n      />\n\n      {post.frontmatter.hero && (\n        <Img\n          fluid={post.frontmatter.hero.childImageSharp.fluid}\n          alt={post.frontmatter.title}\n        />\n      )}\n\n      <PostContent dangerouslySetInnerHTML={{ __html: post.html }} />\n      <BlogPostMarkup\n        post={post}\n        slug={slug}\n        siteUrl={data.site.siteMetadata.siteUrl}\n      />\n      <EditOnGithub slug={slug} />\n\n      <hr\n        style={{\n          marginBottom: rhythm(1),\n        }}\n      />\n\n      <Bio>\n        <div dangerouslySetInnerHTML={{ __html: siteBio }} />\n      </Bio>\n\n      <Fundation lang={post.frontmatter.language} />\n\n      {data.relatedPosts.edges.length ? (\n        <aside>\n          <header>\n            <h2>Related posts:</h2>\n          </header>\n          {data.relatedPosts.edges.map(({ node }) => {\n            const title = get(node, 'frontmatter.title') || node.fields.slug\n            return (\n              <RelatedPost key={node.fields.slug}>\n                <h3\n                  style={{\n                    marginBottom: rhythm(1 / 4),\n                  }}\n                >\n                  <Link style={{ boxShadow: 'none' }} to={node.fields.slug}>\n                    {title}\n                  </Link>\n                </h3>\n                <small>\n                  <time dateTime={node.frontmatter.dateJson}>\n                    {node.frontmatter.date}\n                  </time>\n                </small>\n                <small style={{ margin: '0 1rem' }}>\n                  <span role=\"img\" aria-label=\"Time to read\">\n                    🕐\n                  </span>\n                  {node.timeToRead} min\n                </small>\n                <small>\n                  {(node.frontmatter.tags || []).map(tag => (\n                    <Link\n                      style={{ marginRight: '0.5rem' }}\n                      key={tag}\n                      to={`/${language}/${tag}`}\n                    >\n                      #{tag}\n                    </Link>\n                  ))}\n                </small>\n                <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n              </RelatedPost>\n            )\n          })}\n        </aside>\n      ) : null}\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!, $language: String!, $tags: [String]) {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n    config: markdownRemark(\n      frontmatter: { language: { eq: $language }, type: { eq: \"language\" } }\n    ) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        language\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt\n      html\n      headings {\n        value\n      }\n      wordCount {\n        words\n      }\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        dateJson: date(formatString: \"YYYY-MM-DD\")\n        translations\n        description\n        language\n        tags\n        hero {\n          childImageSharp {\n            fluid(maxWidth: 1000) {\n              ...GatsbyImageSharpFluid_withWebp_noBase64\n            }\n            image: fixed(fit: COVER, width: 1080, jpegProgressive: true) {\n              src\n            }\n            image16x9: fixed(width: 1080, height: 608) {\n              src\n            }\n            image4x3: fixed(\n              width: 1080\n              height: 810\n              cropFocus: CENTER\n              fit: CONTAIN\n              background: \"white\"\n            ) {\n              src\n            }\n            image1x1: fixed(\n              width: 800\n              height: 800\n              cropFocus: CENTER\n              fit: CONTAIN\n              background: \"white\"\n            ) {\n              src\n            }\n          }\n        }\n      }\n    }\n    relatedPosts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        fields: { slug: { ne: $slug } }\n        frontmatter: {\n          language: { eq: $language }\n          type: { eq: null }\n          tags: { in: $tags }\n        }\n      }\n      limit: 4\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            dateJson: date(formatString: \"YYYY-MM-DD\")\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}