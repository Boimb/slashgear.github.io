{"version":3,"file":"component---src-templates-blog-post-js-0df5ee7478fd67a672de.js","mappings":"0KASMA,EAAUC,EAAAA,GAAAA,IAAAA,WAAH,iEAAGA,CAAH,uDAQPC,GAAQD,EAAAA,EAAAA,IAAOE,EAAAA,GAAV,0EAAGF,CAAH,+BAKEG,EAAM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACdC,GAAUC,EAAAA,EAAAA,gBAAe,cAe/B,OACE,gBAACP,EAAD,CAASQ,GAAG,OACV,gBAACN,EAAD,CACEO,MAAOH,EAAQI,IAAIC,gBAAgBF,MACnCG,MAAO,CAAEC,OAAQ,kBAElBR,K,wGCtCDS,GAAOb,EAAAA,EAAAA,IAAOE,EAAAA,GAAV,8EAAGF,CAAH,oBAIJc,EAAcd,EAAAA,GAAAA,IAAAA,WAAH,0EAAGA,CAAH,oCAKXe,EAAYf,EAAAA,GAAAA,WAAAA,WAAH,wEAAGA,CAAH,kBAITgB,GAAOhB,EAAAA,EAAAA,IAAOiB,EAAAA,IAAV,8EAAGjB,CAAH,iKAOJa,EAIAC,GAMAI,EAAa,CACjBC,GAAI,CACFC,KAAM,iKACNC,MACE,sFAEJC,GAAI,CACFF,KAAM,kJACNC,MACE,8EAIOE,EAAY,SAAC,GAAqB,IAAD,IAAlBC,KAAAA,OAAkB,MAAX,KAAW,EACtCC,GAAOnB,EAAAA,EAAAA,gBAAe,YAe5B,OACE,gBAACU,EAAD,CACET,GAAG,aACHmB,OAAO,SACPC,IAAI,aACJC,KAAK,yCAEL,gBAACd,EAAD,KACGI,EAAWM,GAAMJ,KAClB,2BACA,gBAACL,EAAD,KAAYG,EAAWM,GAAMH,QAE/B,gBAACR,EAAD,CACEL,MAAOiB,EAAKhB,IAAIC,gBAAgBF,MAChCqB,IAAI,wC,4JC5ENC,EAAQ9B,EAAAA,GAAAA,MAAAA,WAAH,0EAAGA,CAAH,gbA+CL+B,EAAU/B,EAAAA,GAAAA,OAAAA,WAAH,4EAAGA,CAAH,6DAMAgC,EAAkB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAChC,OACE,gBAACH,EAAD,CAAOvB,GAAG,oBACR,gBAACwB,EAAD,yBACA,uBAAKG,wBAAyB,CAAEC,OAAQF,O,oBC1DjCG,EAAc,kBACzB9B,EAAAA,EAAAA,gBAAe,eCUX+B,EAAqB,CACzBlB,GAAI,QACJG,GAAI,SAGAgB,EAAe,SAAC,GAWf,IAVLC,EAUI,EAVJA,YACAf,EASI,EATJA,KACAgB,EAQI,EARJA,KACAC,EAOI,EAPJA,MACAC,EAMI,EANJA,MACAC,EAKI,EALJA,aACAC,EAII,EAJJA,KAII,IAHJC,KAAAA,OAGI,MAHG,UAGH,EAFJC,EAEI,EAFJA,SAEI,IADJC,KAAAA,OACI,MADG,GACH,EACIC,GAAS1C,EAAAA,EAAAA,gBAAe,cAAxB0C,KAiBFC,EADQb,IACWc,kBAAkBC,MAAMC,QAC/C,SAACC,EAAD,GAA4B,IAAZC,EAAW,EAAXA,KAEd,OADAD,EAAYC,EAAKC,YAAYC,UAAYF,EAAKG,OAAOb,KAC9CS,IAET,IAGIK,EACDnB,EAAH,KAAmBQ,GAAQ,IAAIY,KAAK,OAAWX,EAAKY,aAAarB,YAC/DsB,EAAY,GACZC,EAAkB,GAClBC,EAAsB,GA+C1B,GA7CIrB,IACFmB,EAAY,CACV,CACEG,SAAU,WACVC,QAASjB,EAAKY,aAAaM,QAAUxB,EAAMyB,KAE7C,CACEC,KAAM,gBACNH,QAASjB,EAAKY,aAAaM,QAAUxB,EAAMyB,KAE7C,CACEH,SAAU,eACVC,QAASxB,GAEX,CACEuB,SAAU,iBACVC,QAAS,MAEX,CACED,SAAU,gBACVC,QAAS,gBAKF,YAATpB,IACFgB,EAAUQ,KAAK,CACbL,SAAU,iBACVC,QAAS,kBAEXJ,EAAUQ,KAAK,CACbL,SAAU,kBACVC,QAAS,kBAGPlB,GACFA,EAAKuB,SAAQ,SAACC,GACZV,EAAUQ,KAAK,CACbL,SAAU,cACVC,QAASM,QAMb5B,EAAc,CAChB,IAAK,IAAI6B,EAAI,EAAGA,EAAI7B,EAAa8B,OAAQD,GAAK,EAC5CV,EAAgBO,KAAK,CACnB1C,IAAK,YACL+C,SAAU/B,EAAa6B,GACvB5C,KAAK,GAAIqB,EAAWN,EAAa6B,IAAM7B,EAAa6B,EAAI,KAE1DT,EAAoBM,KAAK,CACvBL,SAAU,sBACVC,QAAS5B,EAAmBM,EAAa6B,MAG7CV,EAAgBO,KAAK,CACnB1C,IAAK,YACL+C,SAAUlD,EACVI,KAAK,GAAIgB,IAkBb,OAdIE,GACFe,EAAUQ,KAAK,CACbL,SAAU,yBACVC,QAASnB,IAITC,GACFc,EAAUQ,KAAK,CACbD,KAAM,WACNH,QAASlB,IAKX,gBAAC4B,EAAA,EAAD,CACEC,eAAgB,CACdpD,KAAAA,EACAqD,OACE,qFAEJC,MAAI,EACJrC,MAAOA,EACPsC,KAAMjB,EACNkB,cAAa,QAAUhC,EAAKY,aAAanB,MACzCD,KAAM,UACDuB,EADC,CAEJ,CACEC,SAAU,eACVC,QAAS,iBAEX,CACEG,KAAK,cACLH,QAASP,GAEX,CACEM,SAAU,SACVC,QAAQ,GAAIjB,EAAKY,aAAaM,QAAUtB,GAE1C,CACEoB,SAAS,WACTC,QAASxB,GAEX,CACEuB,SAAS,iBACTC,QAASP,GAEX,CACEM,SAAS,UACTC,QAASpB,GAEX,CACEmB,SAAU,YACVC,QAAS5B,EAAmBb,IAE9B,CACE4C,KAAK,eACLH,QAAQ,uBAEV,CACEG,KAAK,kBACLH,QAASjB,EAAKY,aAAaqB,OAAOC,SAEpC,CACEd,KAAK,gBACLH,QAASxB,GAEX,CACE2B,KAAK,sBACLH,QAASP,KA5CP,OA8CDG,GA9CC,CA+CJ,CACEO,KAAM,2BACNH,QAAS,+CAEX,CACED,SAAU,YACVC,QAAS,qBAEXkB,OAAO3C,MAKfF,EAAa8C,aAAe,CAC1B5D,KAAK,KACLgB,KAAM,GACND,YAAY,GACZQ,KAAM,IAYR,QC7NMsC,EAAYrF,EAAAA,GAAAA,IAAAA,WAAH,iFAAGA,CAAH,kJASFsF,EAAqB,SAAC,GAAgC,IAA9B9B,EAA6B,EAA7BA,SAAUb,EAAmB,EAAnBA,aACvC4C,EAAOnD,IACPoD,EAASD,EAAKrC,kBAAkBC,MAAMsC,MAC1C,qBAAGnC,KAAgBC,YAAYC,UAAYA,KAC3CF,KAAKC,YAAYmC,gBAEnB,OAAO/C,EACL,gBAAC0C,EAAD,CAAW9E,GAAG,iBACXiF,EADH,IACY,IACTD,EAAKrC,kBAAkBC,MAAMwC,KAAI,YAAe,IAAZrC,EAAW,EAAXA,KACnC,GAAIA,EAAKC,YAAYC,UAAYA,EAAjC,CAGE,IAAIoC,EAAkBtC,EAAKG,OAAOb,KAClC,GAAID,EAAc,CAChB,IAAMkD,EAAmBlD,EAAamD,WACpC,SAACC,GAAD,OAAOA,GAAKzC,EAAKC,YAAYC,aAEL,IAAtBqC,IACFD,GAAmBjD,EAAakD,EAAmB,IAGvD,OACE,gBAAC,EAAA7E,KAAD,CACEgF,IAAKJ,EACLjF,MAAO,CACLsF,UAAW,OACXC,eAAgB,QAElBC,GAAIP,EACJQ,SAAU9C,EAAKC,YAAYC,UAE1BF,EAAKC,YAAY8C,qBAM1B,MChDAtG,EAAUC,EAAAA,GAAAA,IAAAA,WAAH,yEAAGA,CAAH,yBAIAsG,EAAwB,SAAC,GAAc,IAAZ1D,EAAW,EAAXA,KAGlB2D,GAEhBjG,EAAAA,EAAAA,gBAAe,cAHjB0C,KACEY,aAAgB2C,WAYpB,OACE,gBAACxG,EAAD,KACE,qBACE6B,KAAS2E,EAAL,yBAAwC3D,EAAxC,WACJlB,OAAO,UAFT,8B,UCzBN,EAAe,IAA0B,4DCK5B8E,EAAa,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAM7D,EAAoB,EAApBA,KAAMsB,EAAc,EAAdA,QACjCxB,EAAQgE,GAAAA,CAAKD,EAAM,mCAAoC,CAC3DE,UAAW,GACXC,SAAU,GACVC,SAAU,KAEZ,OACE,gBAAC,IAAD,CACE5C,QAAS,CACP,WAAY,oBACZ,QAAS,UACT6C,SAAUL,EAAKlD,YAAYd,MAC3BsE,OAAQ,gBACRC,MAAO,YACPC,UAAWR,EAAKS,UAAUC,MAC1BC,IAAI,GAAIlD,EAAUtB,EAClByE,iBAAiB,GAAInD,EAAUtB,EAC/B0E,cAAeb,EAAKlD,YAAYT,SAChCyE,YAAad,EAAKlD,YAAYT,SAC9B0E,aAAcf,EAAKlD,YAAYT,SAC/BP,YAAakE,EAAKlD,YAAYhB,YAC9BkF,YAAahB,EAAKiB,KAClBhF,MAAO,CAAC,GACHwB,EAAUxB,EAAMiE,UAAUxC,IADxB,GAEFD,EAAUxB,EAAMkE,SAASzC,IAFvB,GAGFD,EAAUxB,EAAMmE,SAAS1C,KAE9BwD,SAAUlB,EAAKlD,YAAYR,KAC3B6E,OAAQ,CACN,QAAS,SACTxD,KAAM,iBAERyD,UAAW,CACT,QAAS,eACTzD,KAAM,gBACN3C,KAAM,CACJ,QAAS,cACT2F,IAAI,GAAIlD,EAAU4D,Q,UC1BxBC,EAAc/H,EAAAA,GAAAA,IAAAA,WAAH,iEAAGA,CAAH,sBAIXgI,EAAchI,EAAAA,GAAAA,IAAAA,WAAH,iEAAGA,CAAH,uBAIF,SAASiI,EAAT,GAIX,IAHF1C,EAGC,EAHDA,KAGC,IAFD2C,YAA+BtF,GAE9B,EAFcuF,SAEd,EAFwBC,KAExB,EAF8BxF,MAAMY,EAEpC,EAFoCA,SACrC6E,EACC,EADDA,SAEM5B,EAAOlB,EAAK+C,eAEZC,GADYC,GAAAA,CAAIjD,EAAD,4BACLiD,GAAAA,CAAIjD,EAAM,gBACFkB,EAAKgC,QAE7B,OACE,gBAAC,IAAD,CACEJ,SAAUA,EACVK,OAAQnD,EAAKmD,OACb/F,aAAc8D,EAAKlD,YAAYZ,cAE/B,gBAAC,EAAD,CACEE,KAAK,UACLJ,MAAOgE,EAAKlD,YAAYd,MACxBF,YAAakE,EAAKlD,YAAYhB,aAAekE,EAAKgC,QAClDjH,KAAMiF,EAAKlD,YAAYC,SACvBb,aAAc8D,EAAKlD,YAAYZ,aAC/BD,MACE+D,EAAKlD,YAAYoF,KACblC,EAAKlD,YAAYoF,KAAKjI,gBAAgBgC,MACtC,KAENE,KAAMA,EACNE,SAAU2D,EAAKlD,YAAYT,SAC3BC,KAAM0D,EAAKlD,YAAYR,OAEzB,sBAAIpC,MAAO,CAAEiI,MAAO,kBAAoBnC,EAAKlD,YAAYd,OACxDgE,EAAKoC,SAASpE,OAAS,GACtB,gBAACzC,EAAD,CAAiBC,gBAAiBwE,EAAKxE,kBAEzC,uBACEtB,MAAK,kBACAmI,EAAAA,EAAAA,KAAM,IADN,CAEHC,cAAcC,EAAAA,EAAAA,IAAO,GACrBC,WAAWD,EAAAA,EAAAA,KAAQ,MAGrB,wBAAME,SAAUzC,EAAKlD,YAAYT,UAC9B2D,EAAKlD,YAAY4F,MAEpB,yBAAOxI,MAAO,CAAEyI,WAAY,UACxB3C,EAAKlD,YAAYR,MAAQ,IAAI4C,KAAI,SAACpB,GAAD,OACjC,gBAAC,EAAAvD,KAAD,CACEL,MAAO,CAAE0I,YAAa,UACtBrD,IAAKzB,EACL4B,GAAE,IAAM3C,EAAN,IAAkBe,GAHtB,IAKIA,QAMV,gBAACe,EAAD,CACE9B,SAAUA,EACVb,aAAc8D,EAAKlD,YAAYZ,eAGhC8D,EAAKlD,YAAYoF,MAChB,gBAAC,IAAD,CACEW,MAAO7C,EAAKlD,YAAYoF,KAAKjI,gBAAgB4I,MAC7CzH,IAAK4E,EAAKlD,YAAYd,QAI1B,gBAACsF,EAAD,CAAa7F,wBAAyB,CAAEC,OAAQsE,EAAKiB,QACrD,gBAAClB,EAAD,CACEC,KAAMA,EACN7D,KAAMA,EACNsB,QAASqB,EAAKvC,KAAKY,aAAaM,UAElC,gBAACoC,EAAD,CAAuB1D,KAAMA,IAE7B,sBACEjC,MAAO,CACLoI,cAAcC,EAAAA,EAAAA,IAAO,MAIzB,gBAAC,IAAD,KACE,uBAAK9G,wBAAyB,CAAEC,OAAQoG,MAG1C,gBAAC,IAAD,CAAW/G,KAAMiF,EAAKlD,YAAYC,WAEjC+B,EAAKgE,aAAapG,MAAMsB,OACvB,6BACE,8BACE,6CAEDc,EAAKgE,aAAapG,MAAMwC,KAAI,YAAe,IAAZrC,EAAW,EAAXA,KACxBb,EAAQ+F,GAAAA,CAAIlF,EAAM,sBAAwBA,EAAKG,OAAOb,KAC5D,OACE,gBAACoF,EAAD,CAAa,cAAY,eAAehC,IAAK1C,EAAKG,OAAOb,MACvD,sBACEjC,MAAO,CACLoI,cAAcC,EAAAA,EAAAA,IAAO,EAAI,KAG3B,gBAAC,EAAAhI,KAAD,CAAML,MAAO,CAAEsF,UAAW,QAAUE,GAAI7C,EAAKG,OAAOb,MACjDH,IAGL,6BACE,wBAAMyG,SAAU5F,EAAKC,YAAYT,UAC9BQ,EAAKC,YAAY4F,OAGtB,yBAAOxI,MAAO,CAAEC,OAAQ,WACtB,wBAAM4I,KAAK,MAAM,aAAW,gBAA5B,MAGClG,EAAKmG,WAJR,QAMA,8BACInG,EAAKC,YAAYR,MAAQ,IAAI4C,KAAI,SAACpB,GAAD,OACjC,gBAAC,EAAAvD,KAAD,CACEL,MAAO,CAAE0I,YAAa,UACtBrD,IAAKzB,EACL4B,GAAE,IAAM3C,EAAN,IAAkBe,GAHtB,IAKIA,OAIR,qBAAGrC,wBAAyB,CAAEC,OAAQmB,EAAKmF,gBAKjD","sources":["webpack://root/./src/components/bio/bio.component.js","webpack://root/./src/components/fundation/fundation.component.js","webpack://root/./src/components/tableOfContents.component.js","webpack://root/./src/components/lang/useLanguage.js","webpack://root/./src/components/markup/global.markup.js","webpack://root/./src/components/lang/availableLanguages.component.js","webpack://root/./src/components/editOnGithub.component.js","webpack://root/./src/assets/picture_of_me.jpg","webpack://root/./src/components/markup/post.markup.js","webpack://root/./src/templates/blog-post.js"],"sourcesContent":["import React from 'react'\n\n// Import typefaces\nimport 'typeface-montserrat'\n\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport Img from 'gatsby-image'\n\nconst Wrapper = styled.div`\n  margin-bottom: 2.5rem;\n\n  * > div {\n    margin-left: 0.5rem;\n  }\n`\n\nconst Image = styled(Img)`\n  float: left;\n  flex-shrink: 0;\n`\n\nexport const Bio = ({ children }) => {\n  const picture = useStaticQuery(graphql`\n    {\n      img: file(\n        relativePath: { eq: \"picture_of_me.jpg\" }\n        sourceInstanceName: { eq: \"static_images\" }\n      ) {\n        childImageSharp {\n          fixed(quality: 60, height: 150, width: 150, cropFocus: NORTH) {\n            ...GatsbyImageSharpFixed_withWebp\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Wrapper id=\"bio\">\n      <Image\n        fixed={picture.img.childImageSharp.fixed}\n        style={{ margin: '0 1.2rem 0 0' }}\n      />\n      {children}\n    </Wrapper>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { OutboundLink } from 'gatsby-plugin-google-analytics'\n\nconst Logo = styled(Img)`\n  flex-shrink: 0;\n`\n\nconst TextWrapper = styled.div`\n  flex-grow: 1;\n  margin-right: 1rem;\n`\n\nconst Blocquote = styled.blockquote`\n  border: none;\n`\n\nconst Link = styled(OutboundLink)`\n  display: flex;\n  color: var(--textNormal);\n  box-shadow: none;\n\n  &:hover,\n  &:focus {\n    ${Logo} {\n      filter: drop-shadow(5px 5px 3px var(--textNormal));\n    }\n\n    ${TextWrapper} {\n      text-decoration: underline;\n    }\n  }\n`\n\nconst textByLang = {\n  fr: {\n    text: \"Si vous aimez le contenu de ce blog, ou bien qu'il vous a aidé, s'il vous plait, considérez donner à la fondation Abbé Pierre que je soutiens personnellement.\",\n    quote:\n      '“On n’est jamais heureux que dans le bonheur qu’on donne. Donner, c’est recevoir.”',\n  },\n  en: {\n    text: 'If you like some content of this blog, or it has helped you, please consider donating to the Abbé Pierre Foundation which I personally support.',\n    quote:\n      '\"We are only ever happy in the happiness we give. To give is to receive.\"',\n  },\n}\n\nexport const Fundation = ({ lang = 'en' }) => {\n  const logo = useStaticQuery(graphql`\n    {\n      img: file(\n        relativePath: { eq: \"abbe_pierre.jpeg\" }\n        sourceInstanceName: { eq: \"static_images\" }\n      ) {\n        childImageSharp {\n          fixed(quality: 60, height: 150) {\n            ...GatsbyImageSharpFixed_withWebp\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Link\n      id=\"foundation\"\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      href=\"https://www.fondation-abbe-pierre.fr/\"\n    >\n      <TextWrapper>\n        {textByLang[lang].text}\n        <br />\n        <Blocquote>{textByLang[lang].quote}</Blocquote>\n      </TextWrapper>\n      <Logo\n        fixed={logo.img.childImageSharp.fixed}\n        alt=\"logo de la fondation abbé pierre\"\n      />\n    </Link>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Aside = styled.aside`\n  display: none;\n  width: 400px;\n\n  nav {\n    margin-left: 0.5rem;\n    overflow: auto;\n    max-height: 80vh;\n  }\n\n  ul {\n    list-style: none;\n  }\n\n  li {\n    margin-bottom: 0.5rem;\n    overflow: hidden;\n    white-space: nowrap;\n    ,wordwrap: normal;\n    text-overflow: ellipsis;\n  }\n\n  li > ul {\n    margin-top: 0;\n    margin-left: 1rem;\n  }\n\n  a {\n    color: currentColor;\n    box-shadow: none;\n  }\n\n  a:hover {\n    box-shadow: 0 1px 0 0 currentColor;\n  }\n\n  @media screen and (min-width: 1500px) {\n    & {\n      display: block;\n      position: fixed;\n      top: 7rem;\n      right: 2rem;\n      font-size: 0.8rem;\n    }\n  }\n`\n\nconst Heading = styled.header`\n  margin-bottom: 0.8rem;\n  font-weight: bold;\n  font-size: 1.1rem;\n`\n\nexport const TableOfContents = ({ tableOfContents }) => {\n  return (\n    <Aside id=\"table-of-content\">\n      <Heading>Table of content</Heading>\n      <nav dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n    </Aside>\n  )\n}\n","import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useLanguage = () =>\n  useStaticQuery(graphql`\n    query LanguageSwitcherQuery {\n      allMarkdownRemark(filter: { frontmatter: { type: { eq: \"language\" } } }) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              language\n              language_label\n              language_option\n            }\n          }\n        }\n      }\n    }\n  `)\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Helmet } from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { useLanguage } from '../lang/useLanguage'\n\nconst langCompleteByLang = {\n  fr: 'fr_FR',\n  en: 'en_US',\n}\n\nconst GlobalMarkup = ({\n  description,\n  lang,\n  meta,\n  title,\n  image,\n  translations,\n  slug,\n  type = 'website',\n  dateJson,\n  tags = [],\n}) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n  const langs = useLanguage()\n  const slugByLang = langs.allMarkdownRemark.edges.reduce(\n    (accumulator, { node }) => {\n      accumulator[node.frontmatter.language] = node.fields.slug\n      return accumulator\n    },\n    {}\n  )\n\n  const metaDescription =\n    `${description} ${(tags || []).join(', ')}` || site.siteMetadata.description\n  let imageTags = []\n  let translationTags = []\n  let metaTranslationTags = []\n\n  if (image) {\n    imageTags = [\n      {\n        property: 'og:image',\n        content: site.siteMetadata.siteUrl + image.src,\n      },\n      {\n        name: 'twitter:image',\n        content: site.siteMetadata.siteUrl + image.src,\n      },\n      {\n        property: 'og:image:alt',\n        content: title,\n      },\n      {\n        property: 'og:image:width',\n        content: 1080,\n      },\n      {\n        property: 'og:image:type',\n        content: 'image/jpeg',\n      },\n    ]\n  }\n\n  if (type === 'article') {\n    imageTags.push({\n      property: 'article:author',\n      content: 'Antoine Caron',\n    })\n    imageTags.push({\n      property: 'article:section',\n      content: 'Frontend Tech',\n    })\n\n    if (tags) {\n      tags.forEach((tag) => {\n        imageTags.push({\n          property: 'article:tag',\n          content: tag,\n        })\n      })\n    }\n  }\n\n  if (translations) {\n    for (let i = 0; i < translations.length; i += 2) {\n      translationTags.push({\n        rel: 'alternate',\n        hreflang: translations[i],\n        href: `${slugByLang[translations[i]]}${translations[i + 1]}`,\n      })\n      metaTranslationTags.push({\n        property: 'og:locale:alternate',\n        content: langCompleteByLang[translations[i]],\n      })\n    }\n    translationTags.push({\n      rel: 'alternate',\n      hreflang: lang,\n      href: `${slug}`,\n    })\n  }\n\n  if (dateJson) {\n    imageTags.push({\n      property: 'article:published_time',\n      content: dateJson,\n    })\n  }\n\n  if (tags) {\n    imageTags.push({\n      name: 'keywords',\n      content: tags,\n    })\n  }\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n        prefix:\n          'og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#',\n      }}\n      head\n      title={title}\n      link={translationTags}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        ...metaTranslationTags,\n        {\n          property: 'og:site_name',\n          content: 'Antoine Caron',\n        },\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: 'og:url',\n          content: `${site.siteMetadata.siteUrl}${slug}`,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: type,\n        },\n        {\n          property: 'og:locale',\n          content: langCompleteByLang[lang],\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        ...imageTags,\n        {\n          name: 'google-site-verification',\n          content: 'h1uQ_z8fdlLI60AmxP8vjy1H-bKSDlv0n5XolWfeDIo',\n        },\n        {\n          property: 'fb:app_id',\n          content: '235346886871248',\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nGlobalMarkup.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n  tags: [],\n}\n\nGlobalMarkup.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.object,\n  tags: PropTypes.array,\n}\n\nexport default GlobalMarkup\n","import { useLanguage } from './useLanguage'\nimport { Link } from 'gatsby'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  padding: 1rem;\n  margin: 2rem 0;\n  font-weight: bold;\n  background-color: hsla(268, 53%, 51%, 30%);\n  border-radius: 0.75rem;\n  border: solid hsla(268, 53%, 51%) 1px;\n`\n\nexport const AvailableLanguages = ({ language, translations }) => {\n  const data = useLanguage()\n  const option = data.allMarkdownRemark.edges.find(\n    ({ node }) => node.frontmatter.language == language\n  ).node.frontmatter.language_option\n\n  return translations ? (\n    <Container id=\"lang-switcher\">\n      {option}:{' '}\n      {data.allMarkdownRemark.edges.map(({ node }) => {\n        if (node.frontmatter.language == language) {\n          return\n        } else {\n          let translationLink = node.fields.slug\n          if (translations) {\n            const translationIndex = translations.findIndex(\n              (v) => v == node.frontmatter.language\n            )\n            if (translationIndex !== -1) {\n              translationLink += translations[translationIndex + 1]\n            }\n          }\n          return (\n            <Link\n              key={translationLink}\n              style={{\n                boxShadow: 'none',\n                textDecoration: 'none',\n              }}\n              to={translationLink}\n              hrefLang={node.frontmatter.language}\n            >\n              {node.frontmatter.language_label}\n            </Link>\n          )\n        }\n      })}\n    </Container>\n  ) : null\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Wrapper = styled.div`\n  margin-bottom: 1rem;\n`\n\nexport const EditOnGithubComponent = ({ slug }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          repository\n        }\n      }\n    }\n  `)\n\n  return (\n    <Wrapper>\n      <a\n        href={`${repository}/edit/source/src/pages${slug}index.md`}\n        target=\"_blank\"\n      >\n        Edit this page on Github\n      </a>\n    </Wrapper>\n  )\n}\n","export default __webpack_public_path__ + \"static/picture_of_me-cb64a6913d2e31dbb5dab1f4d113d077.jpg\";","import React from 'react'\nimport _get from 'lodash/get'\nimport { JsonLd } from './jsonLd'\nimport profilePic from '../../assets/picture_of_me.jpg'\n\nexport const PostMarkup = ({ post, slug, siteUrl }) => {\n  const image = _get(post, 'frontmatter.hero.childImageSharp', {\n    image16x9: {},\n    image4x3: {},\n    image1x1: {},\n  })\n  return (\n    <JsonLd\n      content={{\n        '@context': 'http://schema.org',\n        '@type': 'Article',\n        headline: post.frontmatter.title,\n        editor: 'Antoine Caron',\n        genre: 'Tech Blog',\n        wordcount: post.wordCount.words,\n        url: `${siteUrl}${slug}`,\n        mainEntityOfPage: `${siteUrl}${slug}`,\n        datePublished: post.frontmatter.dateJson,\n        dateCreated: post.frontmatter.dateJson,\n        dateModified: post.frontmatter.dateJson,\n        description: post.frontmatter.description,\n        articleBody: post.html,\n        image: [\n          `${siteUrl}${image.image16x9.src}`,\n          `${siteUrl}${image.image4x3.src}`,\n          `${siteUrl}${image.image1x1.src}`,\n        ],\n        keywords: post.frontmatter.tags,\n        author: {\n          '@type': 'Person',\n          name: 'Antoine Caron',\n        },\n        publisher: {\n          '@type': 'Organization',\n          name: 'Antoine Caron',\n          logo: {\n            '@type': 'ImageObject',\n            url: `${siteUrl}${profilePic}`,\n          },\n        },\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport get from 'lodash/get'\nimport Img from 'gatsby-image'\nimport styled from 'styled-components'\n\nimport { Bio } from '../components/bio/bio.component'\nimport { Layout } from '../components/layout.component'\nimport { rhythm, scale } from '../utils/typography'\nimport { TableOfContents } from '../components/tableOfContents.component'\nimport GlobalMarkup from '../components/markup/global.markup'\nimport { AvailableLanguages } from '../components/lang/availableLanguages.component'\nimport { EditOnGithubComponent } from '../components/editOnGithub.component'\nimport { PostMarkup } from '../components/markup/post.markup'\nimport { Fundation } from '../components/fundation/fundation.component'\n\nconst PostContent = styled.div`\n  margin-top: 2rem;\n`\n\nconst RelatedPost = styled.div`\n  margin-left: 1rem;\n`\n\nexport default function BlogPostTemplate({\n  data,\n  pageContext: { previous, next, slug, language },\n  location,\n}) {\n  const post = data.markdownRemark\n  const siteTitle = get(data, `config.frontmatter.title`)\n  const siteBio = get(data, 'config.html')\n  const siteDescription = post.excerpt\n\n  return (\n    <Layout\n      location={location}\n      config={data.config}\n      translations={post.frontmatter.translations}\n    >\n      <GlobalMarkup\n        type=\"article\"\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n        lang={post.frontmatter.language}\n        translations={post.frontmatter.translations}\n        image={\n          post.frontmatter.hero\n            ? post.frontmatter.hero.childImageSharp.image\n            : null\n        }\n        slug={slug}\n        dateJson={post.frontmatter.dateJson}\n        tags={post.frontmatter.tags}\n      />\n      <h1 style={{ color: 'var(--header)' }}>{post.frontmatter.title}</h1>\n      {post.headings.length > 1 && (\n        <TableOfContents tableOfContents={post.tableOfContents} />\n      )}\n      <div\n        style={{\n          ...scale(-1 / 5),\n          marginBottom: rhythm(1),\n          marginTop: rhythm(-1),\n        }}\n      >\n        <time dateTime={post.frontmatter.dateJson}>\n          {post.frontmatter.date}\n        </time>\n        <small style={{ marginLeft: '1rem' }}>\n          {(post.frontmatter.tags || []).map((tag) => (\n            <Link\n              style={{ marginRight: '0.5rem' }}\n              key={tag}\n              to={`/${language}/${tag}`}\n            >\n              #{tag}\n            </Link>\n          ))}\n        </small>\n      </div>\n\n      <AvailableLanguages\n        language={language}\n        translations={post.frontmatter.translations}\n      />\n\n      {post.frontmatter.hero && (\n        <Img\n          fluid={post.frontmatter.hero.childImageSharp.fluid}\n          alt={post.frontmatter.title}\n        />\n      )}\n\n      <PostContent dangerouslySetInnerHTML={{ __html: post.html }} />\n      <PostMarkup\n        post={post}\n        slug={slug}\n        siteUrl={data.site.siteMetadata.siteUrl}\n      />\n      <EditOnGithubComponent slug={slug} />\n\n      <hr\n        style={{\n          marginBottom: rhythm(1),\n        }}\n      />\n\n      <Bio>\n        <div dangerouslySetInnerHTML={{ __html: siteBio }} />\n      </Bio>\n\n      <Fundation lang={post.frontmatter.language} />\n\n      {data.relatedPosts.edges.length ? (\n        <aside>\n          <header>\n            <h2>Related posts:</h2>\n          </header>\n          {data.relatedPosts.edges.map(({ node }) => {\n            const title = get(node, 'frontmatter.title') || node.fields.slug\n            return (\n              <RelatedPost data-testid=\"related-post\" key={node.fields.slug}>\n                <h3\n                  style={{\n                    marginBottom: rhythm(1 / 4),\n                  }}\n                >\n                  <Link style={{ boxShadow: 'none' }} to={node.fields.slug}>\n                    {title}\n                  </Link>\n                </h3>\n                <small>\n                  <time dateTime={node.frontmatter.dateJson}>\n                    {node.frontmatter.date}\n                  </time>\n                </small>\n                <small style={{ margin: '0 1rem' }}>\n                  <span role=\"img\" aria-label=\"Time to read\">\n                    🕐\n                  </span>\n                  {node.timeToRead} min\n                </small>\n                <small>\n                  {(node.frontmatter.tags || []).map((tag) => (\n                    <Link\n                      style={{ marginRight: '0.5rem' }}\n                      key={tag}\n                      to={`/${language}/${tag}`}\n                    >\n                      #{tag}\n                    </Link>\n                  ))}\n                </small>\n                <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n              </RelatedPost>\n            )\n          })}\n        </aside>\n      ) : null}\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!, $language: String!, $tags: [String]) {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n    config: markdownRemark(\n      frontmatter: { language: { eq: $language }, type: { eq: \"language\" } }\n    ) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        language\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt\n      html\n      headings {\n        value\n      }\n      wordCount {\n        words\n      }\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        dateJson: date(formatString: \"YYYY-MM-DD\")\n        translations\n        description\n        language\n        tags\n        hero {\n          childImageSharp {\n            fluid(maxWidth: 1000) {\n              ...GatsbyImageSharpFluid_withWebp_noBase64\n            }\n            image: fixed(fit: COVER, width: 1080, jpegProgressive: true) {\n              src\n            }\n            image16x9: fixed(width: 1080, height: 608) {\n              src\n            }\n            image4x3: fixed(\n              width: 1080\n              height: 810\n              cropFocus: CENTER\n              fit: CONTAIN\n              background: \"white\"\n            ) {\n              src\n            }\n            image1x1: fixed(\n              width: 800\n              height: 800\n              cropFocus: CENTER\n              fit: CONTAIN\n              background: \"white\"\n            ) {\n              src\n            }\n          }\n        }\n      }\n    }\n    relatedPosts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        fields: { slug: { ne: $slug } }\n        frontmatter: {\n          language: { eq: $language }\n          type: { eq: null }\n          tags: { in: $tags }\n        }\n      }\n      limit: 4\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            dateJson: date(formatString: \"YYYY-MM-DD\")\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["Wrapper","styled","Image","Img","Bio","children","picture","useStaticQuery","id","fixed","img","childImageSharp","style","margin","Logo","TextWrapper","Blocquote","Link","OutboundLink","textByLang","fr","text","quote","en","Fundation","lang","logo","target","rel","href","alt","Aside","Heading","TableOfContents","tableOfContents","dangerouslySetInnerHTML","__html","useLanguage","langCompleteByLang","GlobalMarkup","description","meta","title","image","translations","slug","type","dateJson","tags","site","slugByLang","allMarkdownRemark","edges","reduce","accumulator","node","frontmatter","language","fields","metaDescription","join","siteMetadata","imageTags","translationTags","metaTranslationTags","property","content","siteUrl","src","name","push","forEach","tag","i","length","hreflang","Helmet","htmlAttributes","prefix","head","link","titleTemplate","social","twitter","concat","defaultProps","Container","AvailableLanguages","data","option","find","language_option","map","translationLink","translationIndex","findIndex","v","key","boxShadow","textDecoration","to","hrefLang","language_label","EditOnGithubComponent","repository","PostMarkup","post","_get","image16x9","image4x3","image1x1","headline","editor","genre","wordcount","wordCount","words","url","mainEntityOfPage","datePublished","dateCreated","dateModified","articleBody","html","keywords","author","publisher","profilePic","PostContent","RelatedPost","BlogPostTemplate","pageContext","previous","next","location","markdownRemark","siteBio","get","excerpt","config","hero","color","headings","scale","marginBottom","rhythm","marginTop","dateTime","date","marginLeft","marginRight","fluid","relatedPosts","role","timeToRead"],"sourceRoot":""}