{"version":3,"file":"component---src-templates-tag-list-js-b13f56449ec6239ba22f.js","mappings":"sKAEaA,EAAOC,EAAAA,QAAAA,GAAAA,WAAH,+DAAGA,CAAH,yBAKJC,EAAWD,EAAAA,QAAAA,GAAAA,WAAH,mEAAGA,CAAH,wC,mECLRE,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACpB,0BACEC,KAAK,sBACLC,wBAAyB,CAAEC,OAAQC,KAAKC,UAAUL,Q,6ECFzCM,EAAa,SAAC,GAAD,QAAGC,MAAAA,OAAH,MAAW,GAAX,EAAeC,EAAf,EAAeA,QAAf,OACxB,gBAAC,IAAD,CACER,QAAS,CACP,WAAY,qBACZ,QAAS,WACTS,gBAAiBF,EAAMG,KAAI,SAACC,EAAMC,GAAP,MAAkB,CAC3C,QAAS,WACTC,SAAUD,EAAQ,EAClBE,IAAI,GAAIN,EAAUG,EAAKI,KAAKC,OAAOC,c,yDCT9BC,E,QAAYrB,QAAAA,GAAAA,WAAH,wEAAGA,CAAH,wB,mYC2FtB,EAjFgB,SAAC,GAAqC,IAAnCsB,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAClCd,GAAQe,EAAAA,EAAAA,GAAID,EAAM,2BAExB,OACE,gBAAC,IAAD,CACEF,SAAUA,EACVI,OAAQ,CACNP,OAAQ,CACNC,KAAMG,EAAYH,MAEpBO,YAAa,CACXC,MAAM,IAAKL,EAAYM,MAG3BC,KAAMP,EAAYQ,UAElB,gBAACC,EAAA,EAAD,CACEC,eAAgB,CAAEH,KAAMP,EAAYQ,UACpCG,KAAM,CACJ,CACEC,KAAM,cACNhC,QAAY2B,EAAKP,EAAYQ,UAAUK,QAAQC,YAAxC,IACLd,EAAYM,MAIlBD,MACEL,EAAYM,IAAIS,OAAO,GAAGC,cAAgBhB,EAAYM,IAAIW,MAAM,GAD7D,IAEDV,EAAKP,EAAYQ,UAAUK,QAAQR,QAEzC,gBAAC,IAAD,CAAYlB,MAAOA,EAAOC,QAASa,EAAKiB,KAAKC,aAAa/B,UAC1D,4BACE,gBAAC,IAAD,SAAaY,EAAYM,KACzB,gBAAC,IAAD,KACGnB,EAAMG,KAAI,YAAe,IAAZK,EAAW,EAAXA,KACNU,GAAQH,EAAAA,EAAAA,GAAIP,EAAM,sBAAwBA,EAAKC,OAAOC,KAC5D,OACE,gBAAC,IAAD,CAAUuB,IAAKzB,EAAKC,OAAOC,MACzB,+BACE,sBACEwB,MAAO,CACLC,cAAcC,EAAAA,EAAAA,IAAO,EAAI,KAG3B,gBAAC,EAAAC,KAAD,CAAMH,MAAO,CAAEI,UAAW,QAAUC,GAAI/B,EAAKC,OAAOC,MACjDQ,IAGL,4BACE,wBAAMsB,SAAUhC,EAAKS,YAAYwB,UAC9BjC,EAAKS,YAAYyB,OAGtB,wBAAMR,MAAO,CAAES,OAAQ,WACrB,wBAAMC,KAAK,MAAM,aAAW,gBAA5B,MAGCpC,EAAKqC,WAJR,QAMA,6BACIrC,EAAKS,YAAY6B,MAAQ,IAAI3C,KAAI,SAACgB,GAAD,OACjC,gBAAC,EAAAkB,KAAD,CACEH,MAAO,CAAEa,YAAa,UACtBd,IAAKd,EACLoB,GAAE,IAAM1B,EAAYQ,SAAlB,IAA8BF,GAHlC,IAKIA,OAIR,qBAAGxB,wBAAyB,CAAEC,OAAQY,EAAKwC","sources":["webpack://root/./src/components/list.component.js","webpack://root/./src/components/markup/jsonLd.js","webpack://root/./src/components/markup/list.markup.js","webpack://root/./src/components/pageTitle.component.js","webpack://root/./src/templates/tag-list.js"],"sourcesContent":["import styled from 'styled-components'\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n`\n\nexport const ListItem = styled.li`\n  display: block;\n  margin: 0;\n  padding: 0;\n`\n","import React from 'react'\n\nexport const JsonLd = ({ content }) => (\n  <script\n    type=\"application/ld+json\"\n    dangerouslySetInnerHTML={{ __html: JSON.stringify(content) }}\n  />\n)\n","import React from 'react'\nimport { JsonLd } from './jsonLd'\n\nexport const ListMarkup = ({ posts = [], siteUrl }) => (\n  <JsonLd\n    content={{\n      '@context': 'https://schema.org',\n      '@type': 'ItemList',\n      itemListElement: posts.map((post, index) => ({\n        '@type': 'ListItem',\n        position: index + 1,\n        url: `${siteUrl}${post.node.fields.slug}`,\n      })),\n    }}\n  />\n)\n","import styled from 'styled-components'\n\nexport const PageTitle = styled.h1`\n  font-size: 1.7rem;\n`\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport get from 'lodash-es/get'\nimport { Link, graphql } from 'gatsby'\n\nimport { Layout } from '../components/layout.component'\nimport { rhythm } from '../utils/typography'\nimport { ListMarkup } from '../components/markup/list.markup'\nimport lang from '../components/lang/lang.json'\nimport { List, ListItem } from '../components/list.component'\nimport { PageTitle } from '../components/pageTitle.component'\n\nconst TagList = ({ location, pageContext, data }) => {\n  const posts = get(data, 'allMarkdownRemark.edges')\n\n  return (\n    <Layout\n      location={location}\n      config={{\n        fields: {\n          slug: pageContext.slug,\n        },\n        frontmatter: {\n          title: `#${pageContext.tag}`,\n        },\n      }}\n      lang={pageContext.language}\n    >\n      <Helmet\n        htmlAttributes={{ lang: pageContext.language }}\n        meta={[\n          {\n            name: 'description',\n            content: `${lang[pageContext.language].tagList.description} ${\n              pageContext.tag\n            }`,\n          },\n        ]}\n        title={`${\n          pageContext.tag.charAt(0).toUpperCase() + pageContext.tag.slice(1)\n        } ${lang[pageContext.language].tagList.title}`}\n      />\n      <ListMarkup posts={posts} siteUrl={data.site.siteMetadata.siteUrl} />\n      <main>\n        <PageTitle>#{pageContext.tag}</PageTitle>\n        <List>\n          {posts.map(({ node }) => {\n            const title = get(node, 'frontmatter.title') || node.fields.slug\n            return (\n              <ListItem key={node.fields.slug}>\n                <article>\n                  <h2\n                    style={{\n                      marginBottom: rhythm(1 / 4),\n                    }}\n                  >\n                    <Link style={{ boxShadow: 'none' }} to={node.fields.slug}>\n                      {title}\n                    </Link>\n                  </h2>\n                  <span>\n                    <time dateTime={node.frontmatter.dateJson}>\n                      {node.frontmatter.date}\n                    </time>\n                  </span>\n                  <span style={{ margin: '0 1rem' }}>\n                    <span role=\"img\" aria-label=\"Time to read\">\n                      üïê\n                    </span>\n                    {node.timeToRead} min\n                  </span>\n                  <span>\n                    {(node.frontmatter.tags || []).map((tag) => (\n                      <Link\n                        style={{ marginRight: '0.5rem' }}\n                        key={tag}\n                        to={`/${pageContext.language}/${tag}`}\n                      >\n                        #{tag}\n                      </Link>\n                    ))}\n                  </span>\n                  <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n                </article>\n              </ListItem>\n            )\n          })}\n        </List>\n      </main>\n    </Layout>\n  )\n}\n\nexport default TagList\n\nexport const tagListFragment = graphql`\n  query TagList($language: String!, $tag: [String]) {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: {\n          language: { eq: $language }\n          type: { eq: null }\n          tags: { in: $tag }\n        }\n      }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            dateJson: date(formatString: \"YYYY-MM-DD\")\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["List","styled","ListItem","JsonLd","content","type","dangerouslySetInnerHTML","__html","JSON","stringify","ListMarkup","posts","siteUrl","itemListElement","map","post","index","position","url","node","fields","slug","PageTitle","location","pageContext","data","get","config","frontmatter","title","tag","lang","language","Helmet","htmlAttributes","meta","name","tagList","description","charAt","toUpperCase","slice","site","siteMetadata","key","style","marginBottom","rhythm","Link","boxShadow","to","dateTime","dateJson","date","margin","role","timeToRead","tags","marginRight","excerpt"],"sourceRoot":""}