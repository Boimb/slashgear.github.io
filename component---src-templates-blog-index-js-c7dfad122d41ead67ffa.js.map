{"version":3,"sources":["webpack:///./src/components/listItemMarkup.js","webpack:///./src/components/socials.js","webpack:///./src/templates/blog-index.js","webpack:///./src/components/fundation.component.js","webpack:///./src/components/bio.component.js"],"names":["ListItemMarkup","posts","siteUrl","content","itemListElement","map","post","index","position","url","node","fields","slug","Footer","styled","footer","SOCIAL_LINKS","Github","Twitter","LinkedIn","DevTo","Medium","Socials","Object","keys","key","href","reduce","prev","curr","to","BlogIndex","render","config","get","this","siteTitle","description","bio","lang","props","pageContext","language","location","htmlAttributes","meta","name","title","data","site","siteMetadata","dangerouslySetInnerHTML","__html","style","marginBottom","rhythm","boxShadow","dateTime","frontmatter","dateJson","date","margin","role","aria-label","timeToRead","tags","tag","marginRight","excerpt","hero","fluid","childImageSharp","alt","React","Component","Logo","Img","TextWrapper","div","Blocquote","blockquote","Link","OutboundLink","textByLang","fr","text","quote","en","Fundation","logo","useStaticQuery","target","fixed","img","Wrapper","Image","Bio","children","picture"],"mappings":"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","file":"component---src-templates-blog-index-js-c7dfad122d41ead67ffa.js","sourcesContent":["import React from 'react'\nimport { JsonLd } from './jsonLd'\n\nexport const ListItemMarkup = ({ posts = [], siteUrl }) => (\n  <JsonLd\n    content={{\n      '@context': 'https://schema.org',\n      '@type': 'ItemList',\n      itemListElement: posts.map((post, index) => ({\n        '@type': 'ListItem',\n        position: index + 1,\n        url: `${siteUrl}${post.node.fields.slug}`,\n      })),\n    }}\n  />\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\n\nconst Footer = styled.footer`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 4rem;\n`\n\nconst SOCIAL_LINKS = {\n  Github: 'https://github.com/Slashgear',\n  Twitter: 'https://twitter.com/Slashgear_',\n  LinkedIn: 'https://www.linkedin.com/in/antoine-caron-7089788a',\n  DevTo: 'https://dev.to/slashgear_',\n  Medium: 'https://medium.com/@Slashgear_',\n}\n\nexport const Socials = () => (\n  <Footer>\n    <div>\n      {Object.keys(SOCIAL_LINKS)\n        .map(key => (\n          <a key={key} href={SOCIAL_LINKS[key]}>\n            {key}\n          </a>\n        ))\n        .reduce((prev, curr) => [prev, ' ‚Ä¢ ', curr])}\n    </div>\n\n    <div>\n      <Link to=\"/rss.xml\">RSS</Link>\n    </div>\n  </Footer>\n)\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport get from 'lodash/get'\nimport Helmet from 'react-helmet'\nimport Img from 'gatsby-image'\n\nimport { Bio } from '../components/bio.component'\nimport { Layout } from '../components/layout'\nimport { rhythm } from '../utils/typography'\nimport { Socials } from '../components/socials'\nimport { ListItemMarkup } from '../components/listItemMarkup'\nimport { Fundation } from '../components/fundation.component'\n\nclass BlogIndex extends React.Component {\n  render() {\n    const config = get(this, 'props.data.config')\n    const posts = get(this, 'props.data.allMarkdownRemark.edges')\n    const siteTitle = get(config, 'frontmatter.title')\n    const description = get(config, 'frontmatter.description')\n    const bio = get(config, 'html')\n    const lang = this.props.pageContext.language\n\n    return (\n      <Layout location={this.props.location} config={config}>\n        <Helmet\n          htmlAttributes={{ lang }}\n          meta={[{ name: 'description', content: description }]}\n          title={siteTitle}\n        />\n        <ListItemMarkup\n          posts={posts}\n          siteUrl={this.props.data.site.siteMetadata.siteUrl}\n        />\n        <Bio>\n          <div dangerouslySetInnerHTML={{ __html: bio }} />\n        </Bio>\n\n        <Fundation lang={lang} />\n\n        {posts.map(({ node }) => {\n          const title = get(node, 'frontmatter.title') || node.fields.slug\n          return (\n            <div key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: 'none' }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>\n                <time dateTime={node.frontmatter.dateJson}>\n                  {node.frontmatter.date}\n                </time>\n              </small>\n              <small style={{ margin: '0 1rem' }}>\n                <span role=\"img\" aria-label=\"Time to read\">\n                  üïê\n                </span>\n                {node.timeToRead} min\n              </small>\n              <small>\n                {(node.frontmatter.tags || []).map(tag => (\n                  <Link\n                    style={{ marginRight: '0.5rem' }}\n                    key={tag}\n                    to={`/${this.props.pageContext.language}/${tag}`}\n                  >\n                    #{tag}\n                  </Link>\n                ))}\n              </small>\n              <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n              {node.frontmatter.hero && (\n                <Img\n                  fluid={node.frontmatter.hero.childImageSharp.fluid}\n                  alt={node.frontmatter.title}\n                />\n              )}\n            </div>\n          )\n        })}\n        <Socials />\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const blogIndexFragment = graphql`\n  query BlogPost($language: String!) {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n    config: markdownRemark(\n      frontmatter: { language: { eq: $language }, type: { eq: \"language\" } }\n    ) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        language\n        description\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: { language: { eq: $language }, type: { eq: null } }\n      }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            dateJson: date(formatString: \"YYYY-MM-DD\")\n            description\n            tags\n            hero {\n              childImageSharp {\n                fluid(maxWidth: 1000) {\n                  ...GatsbyImageSharpFluid_withWebp_noBase64\n                }\n                image: fixed(\n                  fit: COVER\n                  width: 1080\n                  jpegProgressive: true\n                  jpegQuality: 60\n                  height: 1080\n                ) {\n                  src\n                  height\n                  width\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { OutboundLink } from 'gatsby-plugin-google-analytics'\n\nconst Logo = styled(Img)`\n  flex-shrink: 0;\n`\n\nconst TextWrapper = styled.div`\n  flex-grow: 1;\n  margin-right: 1rem;\n`\n\nconst Blocquote = styled.blockquote`\n  border: none;\n`\n\nconst Link = styled(OutboundLink)`\n  display: flex;\n  color: var(--textNormal);\n  box-shadow: none;\n\n  &:hover,\n  &:focus {\n    ${Logo} {\n      filter: drop-shadow(5px 5px 3px var(--textNormal));\n    }\n\n    ${TextWrapper} {\n      text-decoration: underline;\n    }\n  }\n`\n\nconst textByLang = {\n  fr: {\n    text:\n      \"Si vous aimez le contenu de ce blog, ou bien qu'il vous a aid√©, s'il vous plait, consid√©rez donner √† la fondation Abb√© Pierre que je soutiens personnellement.\",\n    quote:\n      '‚ÄúOn n‚Äôest jamais heureux que dans le bonheur qu‚Äôon donne. Donner, c‚Äôest recevoir.‚Äù',\n  },\n  en: {\n    text:\n      'If you like some content of this blog, or it has helped you, please consider donating to the Abb√© Pierre Foundation which I personally support.',\n    quote:\n      '\"We are only ever happy in the happiness we give. To give is to receive.\"',\n  },\n}\n\nexport const Fundation = ({ lang = 'en' }) => {\n  const logo = useStaticQuery(graphql`\n    {\n      img: file(\n        relativePath: { eq: \"abbe_pierre.jpeg\" }\n        sourceInstanceName: { eq: \"static_images\" }\n      ) {\n        childImageSharp {\n          fixed(quality: 60, height: 150) {\n            ...GatsbyImageSharpFixed_withWebp\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Link target=\"_blank\" href=\"https://www.fondation-abbe-pierre.fr/\">\n      <TextWrapper>\n        {textByLang[lang].text}\n        <br />\n        <Blocquote>{textByLang[lang].quote}</Blocquote>\n      </TextWrapper>\n      <Logo\n        fixed={logo.img.childImageSharp.fixed}\n        alt=\"logo de la fondation abb√© pierre\"\n      />\n    </Link>\n  )\n}\n","import React from 'react'\n\n// Import typefaces\nimport 'typeface-montserrat'\nimport 'typeface-merriweather'\n\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport Img from 'gatsby-image'\n\nconst Wrapper = styled.div`\n  margin-bottom: 2.5rem;\n\n  * > div {\n    margin-left: 0.5rem;\n  }\n`\n\nconst Image = styled(Img)`\n  float: left;\n  flex-shrink: 0;\n`\n\nexport const Bio = ({ children }) => {\n  const picture = useStaticQuery(graphql`\n    {\n      img: file(\n        relativePath: { eq: \"picture_of_me.jpg\" }\n        sourceInstanceName: { eq: \"static_images\" }\n      ) {\n        childImageSharp {\n          fixed(quality: 60, height: 150, width: 150, cropFocus: NORTH) {\n            ...GatsbyImageSharpFixed_withWebp\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Wrapper>\n      <Image\n        fixed={picture.img.childImageSharp.fixed}\n        style={{ margin: '0 1.2rem 0 0' }}\n      />\n      {children}\n    </Wrapper>\n  )\n}\n"],"sourceRoot":""}