{"componentChunkName":"component---src-templates-blog-post-js","path":"/fr/kotlin/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://slashgear.github.io"}},"config":{"html":"<p>Ecrit par <strong>Antoine Caron</strong> qui vit et travaille à Lyon et développe des choses utiles à <a href=\"https://www.bedrockstreaming.com/\">Bedrock</a>.\nTu devrais le suivre sur <a href=\"https://twitter.com/Slashgear_\">Twitter</a></p>","fields":{"slug":"/fr/"},"frontmatter":{"title":"Antoine Caron","language":"fr"}},"markdownRemark":{"id":"fd0a25ab-a156-55bd-9d66-dab361e15308","excerpt":"JetBrains, pour les développeurs Java enfermés dans une grotte et ne\nconnaissant qu’Eclipse, outre le fait de fournir une suite d’outils…","html":"<p>JetBrains, pour les développeurs Java enfermés dans une grotte et ne\nconnaissant qu’Eclipse, outre le fait de fournir une suite d’outils\npour le développement et un IDE Java (IntelliJ), s’est lancé en 2011\ndans la création d’un nouveau langage de programmation. <strong>Plein de\npromesses, ce langage, le Kotlin, présenté par Hadi Harriri lors du\nMix-it 2016, m’a fait forte impression.</strong></p>\n<p>Du jeudi 21 au vendredi 22 avril 2016 se tenait à Lyon la sixième\nédition du Mix-IT. Rassemblant plus de 600 participants, cette\nconvention aux allures de grande fête pour développeurs et agilistes\npermettaient de suivre talks, ateliers, conférences mais également\nd’échanger autour d’une délicieuse crêpe suzette avec des passionnés\nvenus du monde entier.</p>\n<p>En attendant l’article de retour sur le Mix-IT, revenons-en au\nsujet principal de cet article, le Kotlin. Ne connaissant alors ce\nlangage que de nom, j’étais très intrigué par la présentation de\nMr Hadi Harriri nommée “Kotlin : ready for production”. Après une\nprésentation assez sommaire de l’historique du langage et de l’objectif\ndu projet de Jetbrains, on comprend assez rapidement qu’en introduisant\nle Kotlin, la firme internationale tente de répondre aux besoins des\ndéveloppeurs Java en rassemblant dans un langage le meilleur du Scala,\ndes avantages du C#, et une concision poussée à l’extrême. C’est à se\ndemander si la firme perd espoir en Oracle pour sortir de nouvelles\nversions de Java plus ambitieuses.</p>\n<h2 id=\"la-concision-ok\" style=\"position:relative;\"><a href=\"#la-concision-ok\" aria-label=\"la concision ok permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>La concision ok</h2>\n<p>Comme je le dis plus haut, la concision était une volonté et un objectif\ntrès clair de Jetbrains pour la création du langage Kotlin. Il est\nvrai qu’en Java, on peut très facilement se retrouver à avoir du\nBoilerplate un peu partout. On pense aux getter/setter, très verbeux\npour finalement une fonctionnalité qu’on peut résumer habilement.\nÉvidemment, des plugins comme Lombok permettent par annotation de\nréduire tous ce volume de code.</p>\n<p><em>Afin de vous montrer un exemple de concision, voici une comparaison\nentre un objet très simple en Java et l’exact équivalent en Kotlin.</em></p>\n<p>Version Java :</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">Person</span> guest <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> id <span class=\"token operator\">==</span> guest<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> guest<span class=\"token punctuation\">.</span>getName <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>guest<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> prime <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> prime <span class=\"token operator\">*</span> result <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> prime <span class=\"token operator\">*</span> result <span class=\"token operator\">+</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token string\">\"Person(name=\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\",id=\"</span><span class=\"token operator\">+</span>id<span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t      \tperson <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CloneNotSupportedException</span> cnse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t      \tcnse<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">}</span>\n\t    person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    person<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Version Kotlin :</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">dat <span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> id<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Les fonctions venant de Object (toString,equals,..) sont apportées par\nle mot clef “data” devant “class” dans le fichier Kotlin.</p>\n<h2 id=\"des-fonctionnalités-intéressantes\" style=\"position:relative;\"><a href=\"#des-fonctionnalit%C3%A9s-int%C3%A9ressantes\" aria-label=\"des fonctionnalités intéressantes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Des fonctionnalités intéressantes</h2>\n<p>Lors de la conférence du Mix-IT, j’ai pu repérer quelques\nfonctionnalités qui me semblent réellement intéressantes à vous\npartager dans cet article. Cette liste n’est pas exhaustive, mais\ndevrait vous donnez un aperçu des possibilités.</p>\n<h2 id=\"classes\" style=\"position:relative;\"><a href=\"#classes\" aria-label=\"classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes</h2>\n<p>Pour déclarer une classe en Kotlin, on peut se débarrasser des\ngetter/setter, on peut définir un constructeur principal. En outre,\non peut même définir la mutabilité des attributs de la classe grâce\naux mots clés var (mutable) et val (read-only).</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> firstName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> lastName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"déclarations-de-fonction-sans-accolades-inline\" style=\"position:relative;\"><a href=\"#d%C3%A9clarations-de-fonction-sans-accolades-inline\" aria-label=\"déclarations de fonction sans accolades inline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Déclarations de fonction sans accolades (inline)</h2>\n<p>On peut déclarer des fonctions sans accolades, c’est assez compacte.\nOn perd un peu en lisibilité mais on gagne en espace.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> j<span class=\"token operator\">:</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"des-conditions-plus-simples\" style=\"position:relative;\"><a href=\"#des-conditions-plus-simples\" aria-label=\"des conditions plus simples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Des conditions plus simples</h2>\n<p>Adieu le switch au profit du when avec des “arrow operators”.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">1</span> <span class=\"token operator\">-></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x == 1\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token number\">2</span> <span class=\"token operator\">-></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x == 2\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Note the block</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is neither 1 nor 2\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pour les boucles rien de spécial à noter de particulier mais c’est sur l’opération “if” qu’on peut observer un ajout très pratique.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> max <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Choose a\"</span><span class=\"token punctuation\">)</span>\n    a\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Choose b\"</span><span class=\"token punctuation\">)</span>\n    b\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>La dernière expression du block if est la valeur du block. On évite\ndonc l’initialisation de variables en dehors du bloc et évite sa\nmodification dans chacune des branches. On peut remarquer que\nl’opérateur de fin d’instruction ‘;’ disparaît (en réalité\nil est optionnel)</p>\n<h2 id=\"adieu-les-nullpointerexception\" style=\"position:relative;\"><a href=\"#adieu-les-nullpointerexception\" aria-label=\"adieu les nullpointerexception permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adieu les “NullPointerException”</h2>\n<p>Kotlin a été pensé pour éviter les danger des références null et faire\ndisparaître les NullPointerException et les “null-check”.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span>\na <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// compilation error</span>\nTo allow nulls<span class=\"token punctuation\">,</span> we can declare a variable <span class=\"token keyword\">as</span> nullable string<span class=\"token punctuation\">,</span> written String<span class=\"token operator\">?:</span>\n\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span>\nb <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// ok</span>\n\nb<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>length</code></pre></div>\n<p>On ne peut pas affecter à une variable la valeur null si on n’a pas\ndélibérément défini cette variable comme nullable. Le Kotlin introduit\négalement le “call safe operator” qui permet de tester la nullité d’une\nvariable avant l’appel d’un fonction sur cette variable.</p>\n<h2 id=\"des-fonctions-callable\" style=\"position:relative;\"><a href=\"#des-fonctions-callable\" aria-label=\"des fonctions callable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Des fonctions “Callable”</h2>\n<p>En Kotlin, une fonction peut être déclarée en dehors d’un objet. Cela\npeut paraître étrange vis à vis du Java mais cette fonctionnalité peut\nêtre très pratique, en particulier pour déclarer la fonction main de\nson projet.</p>\n<p>Une fonction déclarée en dehors d’un objet peut être appelé de\nn’importe quel endroit de cette façon :</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">::</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"la-programmation-fonctionnelle-pour-les-gouverner-tous\" style=\"position:relative;\"><a href=\"#la-programmation-fonctionnelle-pour-les-gouverner-tous\" aria-label=\"la programmation fonctionnelle pour les gouverner tous permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>La programmation fonctionnelle pour les gouverner tous</h2>\n<p>Le paradigme fonctionnelle est bien sûr présent dans le langage. Il\npermet de réaliser toutes les opérations usuelles (map, reduce,\nforEach,etc,..)</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nints<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n  sum <span class=\"token operator\">+=</span> it\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"les-extension-functions\" style=\"position:relative;\"><a href=\"#les-extension-functions\" aria-label=\"les extension functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Les “Extension Functions”</h2>\n<p>En Kotlin on peut “étendre” une classe par une fonction de manière\nassez simple. On peut donc facilement rajouter des méthodes sans passer\npar un héritage.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> MutableList<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>index1<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> index2<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> tmp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 'this' corresponds to the list</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ici le mot-clé “this” permet d’accéder à l’objet étendu.</p>\n<h2 id=\"linteropérabilité\" style=\"position:relative;\"><a href=\"#linterop%C3%A9rabilit%C3%A9\" aria-label=\"linteropérabilité permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>L’interopérabilité</h2>\n<p>La question soulevée par ce nouveau langage vient assez rapidement.\nPeut-on facilement passer de Java à Kotlin? Est-ce que notre code\nKotlin va fonctionner avec tous le code Java que l’on a déjà?\nEst-ce que nos outils actuels sont adaptés au développement Kotlin?</p>\n<h2 id=\"les-ide\" style=\"position:relative;\"><a href=\"#les-ide\" aria-label=\"les ide permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Les IDE</h2>\n<p>Bien évidemment, JetBrains met ses produits en avant pour\nl’utilisation du Kotlin. On peut en effet utiliser leur célèbre IDE\nIntellij pour développer dans ce langage. Cerise sur la gâteau, on\npeut même utiliser la version Community gratuite pour se faire une\nidée. Il existe également un plugin pour Eclipse. Par contre, aucun\nprojet de plugin n’est en cours pour NetBeans.</p>\n<h2 id=\"java\" style=\"position:relative;\"><a href=\"#java\" aria-label=\"java permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java</h2>\n<p>Kotlin permet également une compatibilité avec toutes les\nlibrairies Java, c’est sûrement l’argument le plus fort et évidemment\nmis en avant par JetBrains. Le code créé peut donc fonctionner sur une\nJVM de la version 6 à 8.</p>\n<p>On peut donc profiter de tous les avantages du langage Kotlin tout en\nrestant 10 ans en arrière coté virtual machine.\nEnfin, aucune modification n’est nécessaire pour faire intéragir du\ncode Java avec du Kotlin. De plus, l’appel de méthode Java est\ncomplètement transparent pour le Kotlin.</p>\n<h2 id=\"javascript\" style=\"position:relative;\"><a href=\"#javascript\" aria-label=\"javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript</h2>\n<p>Et oui, JetBrains n’a pas voulu ignorer le mouvement récent du\ndéveloppement Javascript. On peut donc cibler le langage Javascript au\nbuild afin de faire tourner son application Kotlin sur un\nenvironnement NodeJS ou bien dans un navigateur.Cette fonctionnalité\nest donc à tester. On tient peut-être ici une alternative au\nTypeScript ?… mais ça reste à mes yeux gadget.</p>\n<h2 id=\"android\" style=\"position:relative;\"><a href=\"#android\" aria-label=\"android permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Android</h2>\n<p>N’ayant fait que quelques Lab Android, je n’ai pas forcément une\nvision complète de l’environnement, mais je me souviens avoir été gêné\npar le nombre de ligne de code Java nécessaire pour obtenir une si\nsimple application mobile.</p>\n<p>Il se trouve que l’on peut dès aujourd’hui développer des applications\nmobiles Android depuis l’IDE recommandé par Google\n(i.e: Android Studio) en Kotlin, à tester pour les amateurs.</p>\n<h2 id=\"spring-boot\" style=\"position:relative;\"><a href=\"#spring-boot\" aria-label=\"spring boot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Boot</h2>\n<p>Enfin, on peut voir que le Kotlin intéresse les committers du projet\nSpring, notamment le lyonnais Sébastien Deleuze avec cet article\nintitulé Developing Spring Boot applications with Kotlin. Voir autant\nd’effervescence autour de ce langage rassure un peu, et\npersonnellement je pense tenter l’utilisation du Kotlin dans le\ncontexte Spring Boot pour me faire une idée plus objective sur le sujet.</p>\n<p>D’ailleurs, le Spring Initializr intègre depuis quelques temps\nl’option de génération de projet Spring Boot en Kotlin.</p>\n<p>N’hésitez pas à aller tester ce langage sur le site et vous faire\nvotre propre avis sur ce langage. Quand à moi, je vais rapidement\nl’essayer pour un de mes projets.</p>\n<p>D’autres ressources sont disponibles sur le Github d’<a href=\"https://github.com/hhariri/awesome-kotlin\">Hadi Hariri</a>\npourraient vous intéresser</p>","headings":[{"value":"La concision ok"},{"value":"Des fonctionnalités intéressantes"},{"value":"Classes"},{"value":"Déclarations de fonction sans accolades (inline)"},{"value":"Des conditions plus simples"},{"value":"Adieu les “NullPointerException”"},{"value":"Des fonctions “Callable”"},{"value":"La programmation fonctionnelle pour les gouverner tous"},{"value":"Les “Extension Functions”"},{"value":"L’interopérabilité"},{"value":"Les IDE"},{"value":"Java"},{"value":"Javascript"},{"value":"Android"},{"value":"Spring Boot"}],"wordCount":{"words":1169},"tableOfContents":"<ul>\n<li><a href=\"/fr/kotlin/#la-concision-ok\">La concision ok</a></li>\n<li><a href=\"/fr/kotlin/#des-fonctionnalit%C3%A9s-int%C3%A9ressantes\">Des fonctionnalités intéressantes</a></li>\n<li><a href=\"/fr/kotlin/#classes\">Classes</a></li>\n<li><a href=\"/fr/kotlin/#d%C3%A9clarations-de-fonction-sans-accolades-inline\">Déclarations de fonction sans accolades (inline)</a></li>\n<li><a href=\"/fr/kotlin/#des-conditions-plus-simples\">Des conditions plus simples</a></li>\n<li><a href=\"/fr/kotlin/#adieu-les-nullpointerexception\">Adieu les “NullPointerException”</a></li>\n<li><a href=\"/fr/kotlin/#des-fonctions-callable\">Des fonctions “Callable”</a></li>\n<li><a href=\"/fr/kotlin/#la-programmation-fonctionnelle-pour-les-gouverner-tous\">La programmation fonctionnelle pour les gouverner tous</a></li>\n<li><a href=\"/fr/kotlin/#les-extension-functions\">Les “Extension Functions”</a></li>\n<li><a href=\"/fr/kotlin/#linterop%C3%A9rabilit%C3%A9\">L’interopérabilité</a></li>\n<li><a href=\"/fr/kotlin/#les-ide\">Les IDE</a></li>\n<li><a href=\"/fr/kotlin/#java\">Java</a></li>\n<li><a href=\"/fr/kotlin/#javascript\">Javascript</a></li>\n<li><a href=\"/fr/kotlin/#android\">Android</a></li>\n<li><a href=\"/fr/kotlin/#spring-boot\">Spring Boot</a></li>\n</ul>","frontmatter":{"title":"Kotlin in action","date":"April 26, 2016","dateJson":"2016-04-26","translations":null,"description":"In the Mix-IT, I followed a conference by Hadi Hariri on the new langague Kotlin. Here are my impressions of this programming language .","language":"fr","tags":null,"hero":{"childImageSharp":{"fluid":{"aspectRatio":1.7730496453900708,"src":"/static/3c98d21c577be7cd0e1f81ec633f7f07/a7715/kotlin.jpg","srcSet":"/static/3c98d21c577be7cd0e1f81ec633f7f07/8f7df/kotlin.jpg 250w,\n/static/3c98d21c577be7cd0e1f81ec633f7f07/0f3a1/kotlin.jpg 500w,\n/static/3c98d21c577be7cd0e1f81ec633f7f07/a7715/kotlin.jpg 1000w,\n/static/3c98d21c577be7cd0e1f81ec633f7f07/10d63/kotlin.jpg 1080w","srcWebp":"/static/3c98d21c577be7cd0e1f81ec633f7f07/e30b5/kotlin.webp","srcSetWebp":"/static/3c98d21c577be7cd0e1f81ec633f7f07/7ca0e/kotlin.webp 250w,\n/static/3c98d21c577be7cd0e1f81ec633f7f07/e9589/kotlin.webp 500w,\n/static/3c98d21c577be7cd0e1f81ec633f7f07/e30b5/kotlin.webp 1000w,\n/static/3c98d21c577be7cd0e1f81ec633f7f07/54d25/kotlin.webp 1080w","sizes":"(max-width: 1000px) 100vw, 1000px"},"image":{"src":"/static/3c98d21c577be7cd0e1f81ec633f7f07/10d63/kotlin.jpg"},"image16x9":{"src":"/static/3c98d21c577be7cd0e1f81ec633f7f07/6edcc/kotlin.jpg"},"image4x3":{"src":"/static/3c98d21c577be7cd0e1f81ec633f7f07/e14ae/kotlin.jpg"},"image1x1":{"src":"/static/3c98d21c577be7cd0e1f81ec633f7f07/db124/kotlin.jpg"}}}}}},"pageContext":{"slug":"/fr/kotlin/","language":"fr","previous":null,"next":{"fields":{"slug":"/fr/rancher/"},"frontmatter":{"title":"Rancher - How to"}}}}}