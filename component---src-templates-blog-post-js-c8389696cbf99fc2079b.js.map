{"version":3,"sources":["webpack:///./src/components/tableOfContents.js","webpack:///./src/components/useLanguage.js","webpack:///./src/components/seo.js","webpack:///./src/components/availableLanguages.js","webpack:///./src/components/editOnGithub.js","webpack:///./src/templates/blog-post.js"],"names":["Aside","styled","aside","Heading","header","TableOfContents","tableOfContents","dangerouslySetInnerHTML","__html","useLanguage","SEO","description","lang","meta","title","image","translations","site","slugByLang","allMarkdownRemark","edges","reduce","accumulator","node","frontmatter","language","fields","slug","metaDescription","siteMetadata","imageTags","translationTags","property","content","siteUrl","src","name","width","height","i","length","push","rel","hreflang","href","htmlAttributes","link","titleTemplate","social","twitter","concat","defaultProps","Container","div","AvailableLanguages","data","option","find","language_option","map","translationLink","translationIndex","findIndex","v","key","style","boxShadow","textDecoration","to","hrefLang","language_label","Wrapper","EditOnGithub","repository","target","BlogPostTemplate","pageContext","previous","next","location","post","markdownRemark","get","siteBio","excerpt","config","hero","childImageSharp","color","headings","scale","display","marginBottom","rhythm","marginTop","date","fluid","alt","html","flexWrap","justifyContent","listStyle","padding","pageQuery"],"mappings":"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","file":"component---src-templates-blog-post-js-c8389696cbf99fc2079b.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Aside = styled.aside`\n  display: none;\n  width: 400px;\n\n  nav {\n    margin-left: 0.5rem;\n  }\n\n  ul {\n    list-style: none;\n  }\n\n  li {\n    margin-bottom: 0.5rem;\n    overflow: hidden;\n    white-space: nowrap;\n    ,wordwrap: normal;\n    text-overflow: ellipsis;\n  }\n\n  li > ul {\n    margin-top: 0;\n    margin-left: 1rem;\n  }\n\n  a {\n    color: currentColor;\n    box-shadow: none;\n  }\n\n  a:hover {\n    box-shadow: 0 1px 0 0 currentColor;\n  }\n\n  @media screen and (min-width: 1500px) {\n    & {\n      display: block;\n      position: fixed;\n      top: 7rem;\n      right: 2rem;\n      font-size: 0.8rem;\n    }\n  }\n`\n\nconst Heading = styled.header`\n  margin-bottom: 0.8rem;\n  font-weight: bold;\n  font-size: 1.1rem;\n`\n\nexport const TableOfContents = ({ tableOfContents }) => {\n  return (\n    <Aside>\n      <Heading>Table of content</Heading>\n      <nav dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n    </Aside>\n  )\n}\n","import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useLanguage = () =>\n  useStaticQuery(graphql`\n    query LanguageSwitcherQuery {\n      allMarkdownRemark(filter: { frontmatter: { type: { eq: \"language\" } } }) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              language\n              language_label\n              language_option\n            }\n          }\n        }\n      }\n    }\n  `)\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { useLanguage } from './useLanguage'\n\nconst SEO = ({ description, lang, meta, title, image, translations }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n  const langs = useLanguage()\n  const slugByLang = langs.allMarkdownRemark.edges.reduce(\n    (accumulator, { node }) => {\n      accumulator[node.frontmatter.language] = node.fields.slug\n      return accumulator\n    },\n    {}\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  let imageTags = []\n  let translationTags = []\n\n  if (image) {\n    imageTags = [\n      {\n        property: 'og:image',\n        content: site.siteMetadata.siteUrl + image.src,\n      },\n      {\n        name: 'twitter:image',\n        content: site.siteMetadata.siteUrl + image.src,\n      },\n      {\n        name: 'og:image:width',\n        content: image.width,\n      },\n      {\n        name: 'og:image:height',\n        content: image.height,\n      },\n    ]\n  }\n\n  if (translations) {\n    for (let i = 0; i < translations.length; i += 2) {\n      translationTags.push({\n        rel: 'alternate',\n        hreflang: translations[i],\n        href: `${slugByLang[translations[i]]}${translations[i + 1]}`,\n      })\n    }\n  }\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      link={translationTags}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: 'og:locale',\n          content: lang,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        ...imageTags,\n        {\n          name: 'google-site-verification',\n          content: 'h1uQ_z8fdlLI60AmxP8vjy1H-bKSDlv0n5XolWfeDIo',\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.object,\n}\n\nexport default SEO\n","import { useLanguage } from './useLanguage'\nimport { Link } from 'gatsby'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  padding: 1rem;\n  margin: 2rem 0;\n  font-weight: bold;\n  background-color: hsla(268, 53%, 51%, 30%);\n  border-radius: 0.75rem;\n  border: solid hsla(268, 53%, 51%) 1px;\n`\n\nexport const AvailableLanguages = ({ language, translations }) => {\n  const data = useLanguage()\n  const option = data.allMarkdownRemark.edges.find(\n    ({ node }) => node.frontmatter.language == language\n  ).node.frontmatter.language_option\n\n  return translations ? (\n    <Container>\n      {option}:{' '}\n      {data.allMarkdownRemark.edges.map(({ node }) => {\n        if (node.frontmatter.language == language) {\n          return\n        } else {\n          let translationLink = node.fields.slug\n          if (translations) {\n            const translationIndex = translations.findIndex(\n              v => v == node.frontmatter.language\n            )\n            if (translationIndex !== -1) {\n              translationLink += translations[translationIndex + 1]\n            }\n          }\n          return (\n            <Link\n              key={translationLink}\n              style={{\n                boxShadow: 'none',\n                textDecoration: 'none',\n              }}\n              to={translationLink}\n              hrefLang={node.frontmatter.language}\n            >\n              {node.frontmatter.language_label}\n            </Link>\n          )\n        }\n      })}\n    </Container>\n  ) : null\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Wrapper = styled.div`\n  margin-bottom: 1rem;\n`\n\nexport const EditOnGithub = ({ slug }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          repository\n        }\n      }\n    }\n  `)\n\n  return (\n    <Wrapper>\n      <a\n        href={`${repository}/edit/source/src/pages${slug}index.md`}\n        target=\"_blank\"\n      >\n        Edit this page on Github\n      </a>\n    </Wrapper>\n  )\n}\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport get from 'lodash/get'\nimport Img from 'gatsby-image'\n\nimport Bio from '../components/bio'\nimport { Layout } from '../components/layout'\nimport { rhythm, scale } from '../utils/typography'\nimport { TableOfContents } from '../components/tableOfContents'\nimport SEO from '../components/seo'\nimport { AvailableLanguages } from '../components/availableLanguages'\nimport { EditOnGithub } from '../components/editOnGithub'\n\nexport default function BlogPostTemplate({\n  data,\n  pageContext: { previous, next, slug },\n  location,\n}) {\n  const post = data.markdownRemark\n  const siteTitle = get(data, `config.frontmatter.title`)\n  const language = get(data, `config.frontmatter.language`)\n  const siteBio = get(data, 'config.html')\n  const siteDescription = post.excerpt\n\n  return (\n    <Layout\n      location={location}\n      config={data.config}\n      translations={post.frontmatter.translations}\n    >\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n        lang={post.frontmatter.lang}\n        translations={post.frontmatter.translations}\n        image={\n          post.frontmatter.hero\n            ? post.frontmatter.hero.childImageSharp.image\n            : null\n        }\n      />\n      <h1 style={{ color: 'var(--header)' }}>{post.frontmatter.title}</h1>\n      {post.headings.length > 1 && (\n        <TableOfContents tableOfContents={post.tableOfContents} />\n      )}\n      <p\n        style={{\n          ...scale(-1 / 5),\n          display: 'block',\n          marginBottom: rhythm(1),\n          marginTop: rhythm(-1),\n        }}\n      >\n        {post.frontmatter.date}\n      </p>\n\n      <AvailableLanguages\n        language={language}\n        translations={post.frontmatter.translations}\n      />\n\n      {post.frontmatter.hero && (\n        <Img\n          fluid={post.frontmatter.hero.childImageSharp.fluid}\n          alt={post.frontmatter.title}\n        />\n      )}\n\n      <div dangerouslySetInnerHTML={{ __html: post.html }} />\n\n      <EditOnGithub slug={slug} />\n\n      <hr\n        style={{\n          marginBottom: rhythm(1),\n        }}\n      />\n      <Bio>\n        <div dangerouslySetInnerHTML={{ __html: siteBio }} />\n      </Bio>\n\n      <ul\n        style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          justifyContent: 'space-between',\n          listStyle: 'none',\n          padding: 0,\n        }}\n      >\n        <li>\n          {previous && (\n            <Link to={previous.fields.slug} rel=\"prev\">\n              ← {previous.frontmatter.title}\n            </Link>\n          )}\n        </li>\n        <li>\n          {next && (\n            <Link to={next.fields.slug} rel=\"next\">\n              {next.frontmatter.title} →\n            </Link>\n          )}\n        </li>\n      </ul>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!, $language: String!) {\n    site {\n      siteMetadata {\n        repository\n      }\n    }\n    config: markdownRemark(\n      frontmatter: { language: { eq: $language }, type: { eq: \"language\" } }\n    ) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        language\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt\n      html\n      headings {\n        value\n      }\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        translations\n        description\n        hero {\n          childImageSharp {\n            fluid(maxWidth: 1000) {\n              ...GatsbyImageSharpFluid_withWebp_noBase64\n            }\n            image: fixed(\n              fit: COVER\n              width: 1080\n              jpegProgressive: true\n              jpegQuality: 60\n              height: 1080\n            ) {\n              src\n              height\n              width\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}