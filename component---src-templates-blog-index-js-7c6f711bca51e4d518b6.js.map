{"version":3,"sources":["webpack:///./src/components/socials.js","webpack:///./src/templates/blog-index.js"],"names":["Footer","styled","footer","Socials","href","BlogIndex","render","config","get","this","posts","siteTitle","description","bio","location","props","htmlAttributes","lang","pageContext","language","meta","name","content","title","dangerouslySetInnerHTML","__html","map","node","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","frontmatter","date","margin","role","aria-label","timeToRead","excerpt","hero","srcSet","childImageSharp","fluid","srcSetWebp","sizes","type","loading","className","src","alt","width","React","Component","blogIndexFragment"],"mappings":"qNAGMA,E,UAASC,EAAOC,OAAV,qEAAGD,CAAH,iDAKCE,EAAU,kBAAM,kBAACH,EAAD,KAC3B,6BACE,uBAAGI,KAAK,gCAAR,UADF,IACoD,uBAAGA,KAAK,kCAAR,WADpD,IACyG,uBAAGA,KAAK,sDAAR,aAGzG,6BAAK,uBAAGA,KAAK,YAAR,U,sDCHDC,E,gLACJC,OAAA,WACE,IAAMC,EAASC,IAAIC,KAAM,qBACnBC,EAAQF,IAAIC,KAAM,sCAClBE,EAAYH,IAAID,EAAQ,qBACxBK,EAAcJ,IAAID,EAAQ,2BAC1BM,EAAML,IAAID,EAAQ,QAExB,OACE,kBAAC,IAAD,CAAQO,SAAUL,KAAKM,MAAMD,SAAUP,OAAQA,GAC7C,kBAAC,IAAD,CACES,eAAgB,CAAEC,KAAMR,KAAKM,MAAMG,YAAYC,UAC/CC,KAAM,CAAC,CAAEC,KAAM,cAAeC,QAASV,IACvCW,MAAOZ,IAET,kBAAC,IAAD,KACE,yBAAKa,wBAAyB,CAAEC,OAAQZ,MAEzCH,EAAMgB,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNJ,EAAQf,IAAImB,EAAM,sBAAwBA,EAAKC,OAAOC,KAC5D,OACE,yBAAKC,IAAKH,EAAKC,OAAOC,MACpB,wBACEE,MAAO,CACLC,aAAcC,YAAO,OAGvB,kBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAW,QAAUC,GAAIR,EAAKC,OAAOC,MACjDN,IAGL,+BAAQI,EAAKS,YAAYC,MACzB,2BAAON,MAAO,CAAEO,OAAQ,WACtB,0BAAMC,KAAK,MAAMC,aAAW,gBAA5B,MAGCb,EAAKc,WAJR,QAMA,uBAAGjB,wBAAyB,CAAEC,OAAQE,EAAKe,WAC1Cf,EAAKS,YAAYO,MAChB,iCACE,4BACEC,OACEjB,EAAKS,YAAYO,KAAKE,gBAAgBC,MAAMC,WAE9CC,MAAM,OACNC,KAAK,eAEP,4BACEL,OAAQjB,EAAKS,YAAYO,KAAKE,gBAAgBC,MAAMF,OACpDI,MAAM,OACNC,KAAK,cAEP,yBACEC,QAAQ,OACRC,UAAU,wBACVC,IAAKzB,EAAKS,YAAYO,KAAKE,gBAAgBC,MAAMM,IACjDC,IAAK1B,EAAKS,YAAYb,MACtB+B,MAAM,cAOlB,kBAAC,EAAD,Q,GAjEgBC,IAAMC,WAyEjBC,GAFEpD,YAEe","file":"component---src-templates-blog-index-js-7c6f711bca51e4d518b6.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Footer = styled.footer`\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const Socials = () => <Footer>\n  <div>\n    <a href=\"https://github.com/Slashgear\">Github</a>‚Ä¢<a href=\"https://twitter.com/Slashgear_\">Twitter</a>‚Ä¢<a href=\"https://www.linkedin.com/in/antoine-caron-7089788a\">Linkedin</a>\n  </div>\n\n  <div><a href=\"/rss.xml\">RSS</a></div>\n</Footer>","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport get from 'lodash/get'\nimport Helmet from 'react-helmet'\n\nimport Bio from '../components/bio'\nimport Layout from '../components/layout'\nimport { rhythm } from '../utils/typography'\nimport { Socials } from \"../components/socials\"\n\nclass BlogIndex extends React.Component {\n  render() {\n    const config = get(this, 'props.data.config')\n    const posts = get(this, 'props.data.allMarkdownRemark.edges')\n    const siteTitle = get(config, 'frontmatter.title')\n    const description = get(config, 'frontmatter.description')\n    const bio = get(config, 'html')\n\n    return (\n      <Layout location={this.props.location} config={config}>\n        <Helmet\n          htmlAttributes={{ lang: this.props.pageContext.language }}\n          meta={[{ name: 'description', content: description }]}\n          title={siteTitle}\n        />\n        <Bio>\n          <div dangerouslySetInnerHTML={{ __html: bio }} />\n        </Bio>\n        {posts.map(({ node }) => {\n          const title = get(node, 'frontmatter.title') || node.fields.slug\n          return (\n            <div key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: 'none' }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n              <small style={{ margin: '0 1rem' }}>\n                <span role=\"img\" aria-label=\"Time to read\">\n                  üïê\n                </span>\n                {node.timeToRead} min\n              </small>\n              <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n              {node.frontmatter.hero && (\n                <picture>\n                  <source\n                    srcSet={\n                      node.frontmatter.hero.childImageSharp.fluid.srcSetWebp\n                    }\n                    sizes=\"30vw\"\n                    type=\"image/webp\"\n                  />\n                  <source\n                    srcSet={node.frontmatter.hero.childImageSharp.fluid.srcSet}\n                    sizes=\"30vw\"\n                    type=\"image/png\"\n                  />\n                  <img\n                    loading=\"lazy\"\n                    className=\"article-item__picture\"\n                    src={node.frontmatter.hero.childImageSharp.fluid.src}\n                    alt={node.frontmatter.title}\n                    width=\"100%\"\n                  />\n                </picture>\n              )}\n            </div>\n          )\n        })}\n        <Socials/>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const blogIndexFragment = graphql`\n  query BlogPost($language: String!) {\n    config: markdownRemark(\n      frontmatter: { language: { eq: $language }, type: { eq: \"language\" } }\n    ) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        language\n        description\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: { language: { eq: $language }, type: { eq: null } }\n      }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            description\n            hero {\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid_withWebp_noBase64\n                }\n                image: fixed(\n                  fit: COVER\n                  width: 1080\n                  jpegProgressive: true\n                  jpegQuality: 60\n                  height: 1080\n                ) {\n                  src\n                  height\n                  width\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}