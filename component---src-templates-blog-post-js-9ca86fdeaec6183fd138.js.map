{"version":3,"sources":["webpack:///./src/components/tableOfContents.js","webpack:///./src/components/useLanguage.js","webpack:///./src/components/seo.js","webpack:///./src/components/availableLanguages.js","webpack:///./src/components/editOnGithub.js","webpack:///./src/components/blogPostMarkup.js","webpack:///./src/templates/blog-post.js"],"names":["Aside","styled","aside","Heading","header","TableOfContents","tableOfContents","dangerouslySetInnerHTML","__html","useLanguage","langCompleteByLang","fr","en","SEO","description","lang","meta","title","image","translations","slug","type","dateJson","tags","site","tagList","split","map","tag","trim","slugByLang","allMarkdownRemark","edges","reduce","accumulator","node","frontmatter","language","fields","metaDescription","siteMetadata","imageTags","translationTags","metaTranslationTags","property","content","siteUrl","src","name","push","length","forEach","i","rel","hreflang","href","htmlAttributes","prefix","head","link","titleTemplate","social","twitter","concat","defaultProps","Container","div","AvailableLanguages","data","option","find","language_option","translationLink","translationIndex","findIndex","v","key","style","boxShadow","textDecoration","to","hrefLang","language_label","Wrapper","EditOnGithub","repository","target","BlogPostMarkup","post","headline","editor","genre","wordcount","wordCount","words","url","mainEntityOfPage","datePublished","dateCreated","dateModified","articleBody","html","hero","childImageSharp","image16x9","image4x3","image1x1","keywords","author","publisher","logo","profilePic","PostContent","BlogPostTemplate","pageContext","previous","next","location","markdownRemark","get","siteBio","excerpt","config","color","headings","scale","display","marginBottom","rhythm","marginTop","dateTime","date","fluid","alt","flexWrap","justifyContent","listStyle","padding","pageQuery"],"mappings":"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","file":"component---src-templates-blog-post-js-9ca86fdeaec6183fd138.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Aside = styled.aside`\n  display: none;\n  width: 400px;\n\n  nav {\n    margin-left: 0.5rem;\n  }\n\n  ul {\n    list-style: none;\n  }\n\n  li {\n    margin-bottom: 0.5rem;\n    overflow: hidden;\n    white-space: nowrap;\n    ,wordwrap: normal;\n    text-overflow: ellipsis;\n  }\n\n  li > ul {\n    margin-top: 0;\n    margin-left: 1rem;\n  }\n\n  a {\n    color: currentColor;\n    box-shadow: none;\n  }\n\n  a:hover {\n    box-shadow: 0 1px 0 0 currentColor;\n  }\n\n  @media screen and (min-width: 1500px) {\n    & {\n      display: block;\n      position: fixed;\n      top: 7rem;\n      right: 2rem;\n      font-size: 0.8rem;\n    }\n  }\n`\n\nconst Heading = styled.header`\n  margin-bottom: 0.8rem;\n  font-weight: bold;\n  font-size: 1.1rem;\n`\n\nexport const TableOfContents = ({ tableOfContents }) => {\n  return (\n    <Aside>\n      <Heading>Table of content</Heading>\n      <nav dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n    </Aside>\n  )\n}\n","import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useLanguage = () =>\n  useStaticQuery(graphql`\n    query LanguageSwitcherQuery {\n      allMarkdownRemark(filter: { frontmatter: { type: { eq: \"language\" } } }) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              language\n              language_label\n              language_option\n            }\n          }\n        }\n      }\n    }\n  `)\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { useLanguage } from './useLanguage'\n\nconst langCompleteByLang = {\n  fr: 'fr_FR',\n  en: 'en_US',\n}\n\nconst SEO = ({\n  description,\n  lang,\n  meta,\n  title,\n  image,\n  translations,\n  slug,\n  type = 'website',\n  dateJson,\n  tags,\n}) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n  const tagList = (tags || '').split(',').map(tag => tag.trim())\n\n  const langs = useLanguage()\n  const slugByLang = langs.allMarkdownRemark.edges.reduce(\n    (accumulator, { node }) => {\n      accumulator[node.frontmatter.language] = node.fields.slug\n      return accumulator\n    },\n    {}\n  )\n\n  const metaDescription =\n    `${description} ${tags}` || site.siteMetadata.description\n  let imageTags = []\n  let translationTags = []\n  let metaTranslationTags = []\n\n  if (image) {\n    imageTags = [\n      {\n        property: 'og:image',\n        content: site.siteMetadata.siteUrl + image.src,\n      },\n      {\n        name: 'twitter:image',\n        content: site.siteMetadata.siteUrl + image.src,\n      },\n      {\n        property: 'og:image:alt',\n        content: title,\n      },\n      {\n        property: 'og:image:width',\n        content: 1080,\n      },\n      {\n        property: 'og:image:type',\n        content: 'image/jpeg',\n      },\n    ]\n  }\n\n  if (type === 'article') {\n    imageTags.push({\n      property: 'article:author',\n      content: 'Antoine Caron',\n    })\n    imageTags.push({\n      property: 'article:section',\n      content: 'Frontend Tech',\n    })\n\n    if (tagList.length > 0) {\n      tagList.forEach(tag => {\n        imageTags.push({\n          property: 'article:tag',\n          content: tag,\n        })\n      })\n    }\n  }\n\n  if (translations) {\n    for (let i = 0; i < translations.length; i += 2) {\n      translationTags.push({\n        rel: 'alternate',\n        hreflang: translations[i],\n        href: `${slugByLang[translations[i]]}${translations[i + 1]}`,\n      })\n      metaTranslationTags.push({\n        property: 'og:locale:alternate',\n        content: langCompleteByLang[translations[i]],\n      })\n    }\n    translationTags.push({\n      rel: 'alternate',\n      hreflang: lang,\n      href: `${slug}`,\n    })\n  }\n\n  if (dateJson) {\n    imageTags.push({\n      property: 'article:published_time',\n      content: dateJson,\n    })\n  }\n\n  if (tags) {\n    imageTags.push({\n      name: 'keywords',\n      content: tags,\n    })\n  }\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n        prefix:\n          'og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#',\n      }}\n      head\n      title={title}\n      link={translationTags}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        ...metaTranslationTags,\n        {\n          property: 'og:site_name',\n          content: 'Antoine Caron',\n        },\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: 'og:url',\n          content: `${site.siteMetadata.siteUrl}${slug}`,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: type,\n        },\n        {\n          property: 'og:locale',\n          content: langCompleteByLang[lang],\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        ...imageTags,\n        {\n          name: 'google-site-verification',\n          content: 'h1uQ_z8fdlLI60AmxP8vjy1H-bKSDlv0n5XolWfeDIo',\n        },\n        {\n          property: 'fb:app_id',\n          content: '235346886871248',\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.object,\n}\n\nexport default SEO\n","import { useLanguage } from './useLanguage'\nimport { Link } from 'gatsby'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  padding: 1rem;\n  margin: 2rem 0;\n  font-weight: bold;\n  background-color: hsla(268, 53%, 51%, 30%);\n  border-radius: 0.75rem;\n  border: solid hsla(268, 53%, 51%) 1px;\n`\n\nexport const AvailableLanguages = ({ language, translations }) => {\n  const data = useLanguage()\n  const option = data.allMarkdownRemark.edges.find(\n    ({ node }) => node.frontmatter.language == language\n  ).node.frontmatter.language_option\n\n  return translations ? (\n    <Container>\n      {option}:{' '}\n      {data.allMarkdownRemark.edges.map(({ node }) => {\n        if (node.frontmatter.language == language) {\n          return\n        } else {\n          let translationLink = node.fields.slug\n          if (translations) {\n            const translationIndex = translations.findIndex(\n              v => v == node.frontmatter.language\n            )\n            if (translationIndex !== -1) {\n              translationLink += translations[translationIndex + 1]\n            }\n          }\n          return (\n            <Link\n              key={translationLink}\n              style={{\n                boxShadow: 'none',\n                textDecoration: 'none',\n              }}\n              to={translationLink}\n              hrefLang={node.frontmatter.language}\n            >\n              {node.frontmatter.language_label}\n            </Link>\n          )\n        }\n      })}\n    </Container>\n  ) : null\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Wrapper = styled.div`\n  margin-bottom: 1rem;\n`\n\nexport const EditOnGithub = ({ slug }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          repository\n        }\n      }\n    }\n  `)\n\n  return (\n    <Wrapper>\n      <a\n        href={`${repository}/edit/source/src/pages${slug}index.md`}\n        target=\"_blank\"\n      >\n        Edit this page on Github\n      </a>\n    </Wrapper>\n  )\n}\n","import React from 'react'\nimport { JsonLd } from './jsonLd'\nimport profilePic from './profile-pic.jpg'\n\nexport const BlogPostMarkup = ({ post, slug, siteUrl }) => (\n  <JsonLd\n    content={{\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      headline: post.frontmatter.title,\n      editor: 'Antoine Caron',\n      genre: 'Tech Blog',\n      wordcount: post.wordCount.words,\n      url: `${siteUrl}${slug}`,\n      mainEntityOfPage: `${siteUrl}${slug}`,\n      datePublished: post.frontmatter.dateJson,\n      dateCreated: post.frontmatter.dateJson,\n      dateModified: post.frontmatter.dateJson,\n      description: post.frontmatter.description,\n      articleBody: post.html,\n      image: [\n        `${siteUrl}${post.frontmatter.hero.childImageSharp.image16x9.src}`,\n        `${siteUrl}${post.frontmatter.hero.childImageSharp.image4x3.src}`,\n        `${siteUrl}${post.frontmatter.hero.childImageSharp.image1x1.src}`,\n      ],\n      keywords: post.frontmatter.tags,\n      author: {\n        '@type': 'Person',\n        name: 'Antoine Caron',\n      },\n      publisher: {\n        '@type': 'Organization',\n        name: 'Antoine Caron',\n        logo: {\n          '@type': 'ImageObject',\n          url: `${siteUrl}${profilePic}`,\n        },\n      },\n    }}\n  />\n)\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport get from 'lodash/get'\nimport Img from 'gatsby-image'\nimport styled from 'styled-components'\n\nimport Bio from '../components/bio'\nimport { Layout } from '../components/layout'\nimport { rhythm, scale } from '../utils/typography'\nimport { TableOfContents } from '../components/tableOfContents'\nimport SEO from '../components/seo'\nimport { AvailableLanguages } from '../components/availableLanguages'\nimport { EditOnGithub } from '../components/editOnGithub'\nimport { BlogPostMarkup } from '../components/blogPostMarkup'\n\nconst PostContent = styled.div`\n  margin-top: 2rem;\n`\n\nexport default function BlogPostTemplate({\n  data,\n  pageContext: { previous, next, slug },\n  location,\n}) {\n  const post = data.markdownRemark\n  const siteTitle = get(data, `config.frontmatter.title`)\n  const language = get(data, `config.frontmatter.language`)\n  const siteBio = get(data, 'config.html')\n  const siteDescription = post.excerpt\n\n  return (\n    <Layout\n      location={location}\n      config={data.config}\n      translations={post.frontmatter.translations}\n    >\n      <SEO\n        type=\"article\"\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n        lang={post.frontmatter.language}\n        translations={post.frontmatter.translations}\n        image={\n          post.frontmatter.hero\n            ? post.frontmatter.hero.childImageSharp.image\n            : null\n        }\n        slug={slug}\n        dateJson={post.frontmatter.dateJson}\n        tags={post.frontmatter.tags}\n      />\n      <h1 style={{ color: 'var(--header)' }}>{post.frontmatter.title}</h1>\n      {post.headings.length > 1 && (\n        <TableOfContents tableOfContents={post.tableOfContents} />\n      )}\n      <time\n        style={{\n          ...scale(-1 / 5),\n          display: 'block',\n          marginBottom: rhythm(1),\n          marginTop: rhythm(-1),\n        }}\n        dateTime={post.frontmatter.dateJson}\n      >\n        {post.frontmatter.date}\n      </time>\n\n      <AvailableLanguages\n        language={language}\n        translations={post.frontmatter.translations}\n      />\n\n      {post.frontmatter.hero && (\n        <Img\n          fluid={post.frontmatter.hero.childImageSharp.fluid}\n          alt={post.frontmatter.title}\n        />\n      )}\n\n      <PostContent dangerouslySetInnerHTML={{ __html: post.html }} />\n      <BlogPostMarkup\n        post={post}\n        slug={slug}\n        siteUrl={data.site.siteMetadata.siteUrl}\n      />\n      <EditOnGithub slug={slug} />\n\n      <hr\n        style={{\n          marginBottom: rhythm(1),\n        }}\n      />\n      <Bio>\n        <div dangerouslySetInnerHTML={{ __html: siteBio }} />\n      </Bio>\n\n      <ul\n        style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          justifyContent: 'space-between',\n          listStyle: 'none',\n          padding: 0,\n        }}\n      >\n        <li>\n          {previous && (\n            <Link to={previous.fields.slug} rel=\"prev\">\n              ← {previous.frontmatter.title}\n            </Link>\n          )}\n        </li>\n        <li>\n          {next && (\n            <Link to={next.fields.slug} rel=\"next\">\n              {next.frontmatter.title} →\n            </Link>\n          )}\n        </li>\n      </ul>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!, $language: String!) {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n    config: markdownRemark(\n      frontmatter: { language: { eq: $language }, type: { eq: \"language\" } }\n    ) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        language\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt\n      html\n      headings {\n        value\n      }\n      wordCount {\n        words\n      }\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        dateJson: date(formatString: \"YYYY-MM-DD\")\n        translations\n        description\n        language\n        tags\n        hero {\n          childImageSharp {\n            fluid(maxWidth: 1000) {\n              ...GatsbyImageSharpFluid_withWebp_noBase64\n            }\n            image: fixed(fit: COVER, width: 1080, jpegProgressive: true) {\n              src\n            }\n            image16x9: fixed(width: 1080, height: 608) {\n              src\n            }\n            image4x3: fixed(\n              width: 1080\n              height: 810\n              cropFocus: CENTER\n              fit: CONTAIN\n              background: \"white\"\n            ) {\n              src\n            }\n            image1x1: fixed(\n              width: 800\n              height: 800\n              cropFocus: CENTER\n              fit: CONTAIN\n              background: \"white\"\n            ) {\n              src\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}