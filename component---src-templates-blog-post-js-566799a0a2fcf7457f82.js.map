{"version":3,"sources":["webpack:///./src/components/tableOfContents.js","webpack:///./src/components/seo.js","webpack:///./src/templates/blog-post.js"],"names":["Aside","styled","aside","Heading","header","TableOfContents","tableOfContents","dangerouslySetInnerHTML","__html","SEO","description","lang","meta","title","image","translations","site","slugByLang","useLanguage","allMarkdownRemark","edges","reduce","accumulator","node","frontmatter","language","fields","slug","metaDescription","siteMetadata","imageTags","translationTags","property","content","siteUrl","src","name","width","height","i","length","push","rel","hreflang","href","htmlAttributes","link","titleTemplate","social","twitter","concat","defaultProps","BlogPostTemplate","render","post","this","props","data","markdownRemark","siteBio","get","excerpt","pageContext","previous","next","location","config","hero","childImageSharp","headings","style","scale","display","marginBottom","rhythm","marginTop","date","html","flexWrap","justifyContent","listStyle","padding","to","React","Component","pageQuery"],"mappings":"giBAGMA,EAAQC,IAAOC,MAAV,6EAAGD,CAAH,kZA6CLE,EAAUF,IAAOG,OAAV,+EAAGH,CAAH,6DAMAI,EAAkB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAChC,OACE,kBAACN,EAAD,KACE,kBAACG,EAAD,yBACA,yBAAKI,wBAAyB,CAAEC,OAAQF,O,y2BC7C9C,IAAMG,EAAM,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,YAAaC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAC5CC,EAD+D,OAC/DA,KAiBFC,EADQC,cACWC,kBAAkBC,MAAMC,QAC/C,SAACC,EAAD,GAA4B,IAAZC,EAAW,EAAXA,KAEd,OADAD,EAAYC,EAAKC,YAAYC,UAAYF,EAAKG,OAAOC,KAC9CL,IAET,IAGIM,EAAkBlB,GAAeM,EAAKa,aAAanB,YACrDoB,EAAY,GACZC,EAAkB,GAuBtB,GArBIjB,IACFgB,EAAY,CACV,CACEE,SAAU,WACVC,QAASjB,EAAKa,aAAaK,QAAUpB,EAAMqB,KAE7C,CACEC,KAAM,gBACNH,QAASjB,EAAKa,aAAaK,QAAUpB,EAAMqB,KAE7C,CACEC,KAAM,iBACNH,QAASnB,EAAMuB,OAEjB,CACED,KAAM,kBACNH,QAASnB,EAAMwB,UAKjBvB,EACF,IAAK,IAAIwB,EAAI,EAAGA,EAAIxB,EAAayB,OAAQD,GAAK,EAC5CR,EAAgBU,KAAK,CACnBC,IAAK,YACLC,SAAU5B,EAAawB,GACvBK,KAAK,GAAI3B,EAAWF,EAAawB,IAAMxB,EAAawB,EAAI,KAK9D,OACE,kBAAC,IAAD,CACEM,eAAgB,CACdlC,QAEFE,MAAOA,EACPiC,KAAMf,EACNgB,cAAa,QAAU/B,EAAKa,aAAahB,MACzCD,KAAM,CACJ,CACEwB,KAAK,cACLH,QAASL,GAEX,CACEI,SAAS,WACTC,QAASpB,GAEX,CACEmB,SAAS,iBACTC,QAASL,GAEX,CACEI,SAAS,UACTC,QAAQ,WAEV,CACED,SAAU,YACVC,QAAStB,GAEX,CACEyB,KAAK,eACLH,QAAQ,WAEV,CACEG,KAAK,kBACLH,QAASjB,EAAKa,aAAamB,OAAOC,SAEpC,CACEb,KAAK,gBACLH,QAASpB,GAEX,CACEuB,KAAK,sBACLH,QAASL,IAnCP,SAqCDE,GArCC,CAsCJ,CACEM,KAAM,2BACNH,QAAS,iDAEXiB,OAAOtC,MAKfH,EAAI0C,aAAe,CACjBxC,KAAK,KACLC,KAAM,GACNF,YAAY,IAWCD,Q,gBCpIT2C,E,gLACJC,OAAA,WACE,IAAMC,EAAOC,KAAKC,MAAMC,KAAKC,eAEvBC,GADYC,IAAIL,KAAKC,MAAN,iCACLI,IAAIL,KAAM,2BAHnB,GAIiBD,EAAKO,QACFN,KAAKC,MAAMM,aAA9BC,EALD,EAKCA,SAAUC,EALX,EAKWA,KAElB,OACE,kBAAC,IAAD,CACEC,SAAUV,KAAKC,MAAMS,SACrBC,OAAQX,KAAKC,MAAMC,KAAKS,OACxBnD,aAAcuC,EAAK9B,YAAYT,cAE/B,kBAAC,EAAD,CACEF,MAAOyC,EAAK9B,YAAYX,MACxBH,YAAa4C,EAAK9B,YAAYd,aAAe4C,EAAKO,QAClDlD,KAAM2C,EAAK9B,YAAYb,KACvBI,aAAcuC,EAAK9B,YAAYT,aAC/BD,MACEwC,EAAK9B,YAAY2C,KACbb,EAAK9B,YAAY2C,KAAKC,gBAAgBtD,MACtC,OAGR,4BAAKwC,EAAK9B,YAAYX,OACrByC,EAAKe,SAAS7B,OAAS,GACtB,kBAAC,EAAD,CAAiBlC,gBAAiBgD,EAAKhD,kBAEzC,uBACEgE,MAAK,iBACAC,aAAM,IADN,CAEHC,QAAS,QACTC,aAAcC,YAAO,GACrBC,UAAWD,aAAQ,MAGpBpB,EAAK9B,YAAYoD,MAGnBtB,EAAK9B,YAAY2C,MAChB,kBAAC,IAAD,CAAMA,KAAMb,EAAK9B,YAAY2C,KAAMtD,MAAOyC,EAAK9B,YAAYX,QAE7D,yBAAKN,wBAAyB,CAAEC,OAAQ8C,EAAKuB,QAC7C,wBACEP,MAAO,CACLG,aAAcC,YAAO,MAGzB,kBAAC,IAAD,KACE,yBAAKnE,wBAAyB,CAAEC,OAAQmD,MAG1C,wBACEW,MAAO,CACLE,QAAS,OACTM,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGX,4BACGlB,GACC,kBAAC,OAAD,CAAMmB,GAAInB,EAASrC,OAAOC,KAAMe,IAAI,QAApC,KACKqB,EAASvC,YAAYX,QAI9B,4BACGmD,GACC,kBAAC,OAAD,CAAMkB,GAAIlB,EAAKtC,OAAOC,KAAMe,IAAI,QAC7BsB,EAAKxC,YAAYX,MADpB,U,GAvEiBsE,IAAMC,WAoFxBC,GAFEjC,YAEO","file":"component---src-templates-blog-post-js-566799a0a2fcf7457f82.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Aside = styled.aside`\n  display: none;\n  width: 400px;\n\n  nav {\n    margin-left: 0.5rem;\n  }\n\n  ul {\n    list-style: none;\n  }\n\n  li {\n    margin-bottom: 0.5rem;\n    overflow: hidden;\n    white-space: nowrap;\n    ,wordwrap: normal;\n    text-overflow: ellipsis;\n  }\n\n  li > ul {\n    margin-top: 0;\n    margin-left: 1rem;\n  }\n\n  a {\n    color: currentColor;\n    box-shadow: none;\n  }\n\n  a:hover {\n    box-shadow: 0 1px 0 0 currentColor;\n  }\n\n  @media screen and (min-width: 1500px) {\n    & {\n      display: block;\n      position: fixed;\n      top: 7rem;\n      right: 2rem;\n      font-size: 0.8rem;\n    }\n  }\n`\n\nconst Heading = styled.header`\n  margin-bottom: 0.8rem;\n  font-weight: bold;\n  font-size: 1.1rem;\n`\n\nexport const TableOfContents = ({ tableOfContents }) => {\n  return (\n    <Aside>\n      <Heading>Table of content</Heading>\n      <nav dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n    </Aside>\n  )\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { useLanguage } from './useLanguage'\n\nconst SEO = ({ description, lang, meta, title, image, translations }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n  const langs = useLanguage()\n  const slugByLang = langs.allMarkdownRemark.edges.reduce(\n    (accumulator, { node }) => {\n      accumulator[node.frontmatter.language] = node.fields.slug\n      return accumulator\n    },\n    {}\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  let imageTags = []\n  let translationTags = []\n\n  if (image) {\n    imageTags = [\n      {\n        property: 'og:image',\n        content: site.siteMetadata.siteUrl + image.src,\n      },\n      {\n        name: 'twitter:image',\n        content: site.siteMetadata.siteUrl + image.src,\n      },\n      {\n        name: 'og:image:width',\n        content: image.width,\n      },\n      {\n        name: 'og:image:height',\n        content: image.height,\n      },\n    ]\n  }\n\n  if (translations) {\n    for (let i = 0; i < translations.length; i += 2) {\n      translationTags.push({\n        rel: 'alternate',\n        hreflang: translations[i],\n        href: `${slugByLang[translations[i]]}${translations[i + 1]}`,\n      })\n    }\n  }\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      link={translationTags}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: 'og:locale',\n          content: lang,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        ...imageTags,\n        {\n          name: 'google-site-verification',\n          content: 'h1uQ_z8fdlLI60AmxP8vjy1H-bKSDlv0n5XolWfeDIo',\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.object,\n}\n\nexport default SEO\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport get from 'lodash/get'\n\nimport Bio from '../components/bio'\nimport { Layout } from '../components/layout'\nimport { rhythm, scale } from '../utils/typography'\nimport { TableOfContents } from '../components/tableOfContents'\nimport SEO from '../components/seo'\nimport { Hero } from '../components/hero'\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = get(this.props, `data.config.frontmatter.title`)\n    const siteBio = get(this, 'props.data.config.html')\n    const siteDescription = post.excerpt\n    const { previous, next } = this.props.pageContext\n\n    return (\n      <Layout\n        location={this.props.location}\n        config={this.props.data.config}\n        translations={post.frontmatter.translations}\n      >\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n          lang={post.frontmatter.lang}\n          translations={post.frontmatter.translations}\n          image={\n            post.frontmatter.hero\n              ? post.frontmatter.hero.childImageSharp.image\n              : null\n          }\n        />\n        <h1>{post.frontmatter.title}</h1>\n        {post.headings.length > 1 && (\n          <TableOfContents tableOfContents={post.tableOfContents} />\n        )}\n        <p\n          style={{\n            ...scale(-1 / 5),\n            display: 'block',\n            marginBottom: rhythm(1),\n            marginTop: rhythm(-1),\n          }}\n        >\n          {post.frontmatter.date}\n        </p>\n\n        {post.frontmatter.hero && (\n          <Hero hero={post.frontmatter.hero} title={post.frontmatter.title} />\n        )}\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <Bio>\n          <div dangerouslySetInnerHTML={{ __html: siteBio }} />\n        </Bio>\n\n        <ul\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            listStyle: 'none',\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!, $language: String!) {\n    config: markdownRemark(\n      frontmatter: { language: { eq: $language }, type: { eq: \"language\" } }\n    ) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        language\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt\n      html\n      headings {\n        value\n      }\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        translations\n        description\n        hero {\n          childImageSharp {\n            fluid(maxWidth: 600) {\n              ...GatsbyImageSharpFluid_withWebp_noBase64\n            }\n            image: fixed(\n              fit: COVER\n              width: 1080\n              jpegProgressive: true\n              jpegQuality: 60\n              height: 1080\n            ) {\n              src\n              height\n              width\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}