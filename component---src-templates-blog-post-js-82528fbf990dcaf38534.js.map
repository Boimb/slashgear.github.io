{"version":3,"file":"component---src-templates-blog-post-js-82528fbf990dcaf38534.js","mappings":"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","sources":["webpack://root/./src/components/bio/bio.component.js","webpack://root/./src/components/foundation/foundation.component.js","webpack://root/./src/components/hero.component.js","webpack://root/./src/components/list.component.js","webpack://root/./src/components/markup/jsonLd.js","webpack://root/./src/components/pageTitle.component.js","webpack://root/./src/components/tableOfContents.component.js","webpack://root/./src/components/lang/useLanguage.js","webpack://root/./src/components/markup/global.markup.js","webpack://root/./src/components/lang/availableLanguages.component.js","webpack://root/./src/components/editOnGithub.component.js","webpack://root/./src/assets/picture_of_me.jpg","webpack://root/./src/components/markup/post.markup.js","webpack://root/./src/templates/blog-post.js"],"sourcesContent":["import React from 'react'\n\n// Import typefaces\nimport 'typeface-montserrat'\n\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport Img from 'gatsby-image'\n\nconst Wrapper = styled.div`\n  min-height: 150px;\n  margin-bottom: 2.5rem;\n\n  * > div {\n    margin-left: 0.5rem;\n  }\n`\n\nconst Image = styled(Img)`\n  float: left;\n  flex-shrink: 0;\n  border-radius: 50%;\n  box-shadow: 2px 4px 8px hsl(0deg 0% 0% / 0.25);\n`\n\nexport const Bio = ({ children, component = 'div' }) => {\n  const picture = useStaticQuery(graphql`\n    {\n      img: file(\n        relativePath: { eq: \"picture_of_me.jpg\" }\n        sourceInstanceName: { eq: \"static_images\" }\n      ) {\n        childImageSharp {\n          fixed(quality: 60, height: 150, width: 150, cropFocus: NORTH) {\n            ...GatsbyImageSharpFixed_withWebp\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Wrapper id=\"bio\" as={component}>\n      <Image\n        fixed={picture.img.childImageSharp.fixed}\n        style={{ margin: '0 1.2rem 0 0' }}\n      />\n      {children}\n    </Wrapper>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery, Link } from 'gatsby'\nimport Img from 'gatsby-image'\n\nconst Logo = styled(Img)`\n  flex-shrink: 0;\n  display: none !important;\n  border-radius: 50%;\n\n  transition: border-radius 300ms ease-in;\n\n  @media screen and (min-width: 1024px) {\n    display: inline-block !important;\n  }\n`\n\nconst TextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  flex-grow: 1;\n  margin: 0 1rem;\n  padding-left: 0.2rem;\n  font-weight: 600;\n`\n\nconst Blocquote = styled.blockquote`\n  border: none;\n  margin: 0;\n`\n\nconst StyledLink = styled(Link)`\n  display: flex;\n  color: var(--textNormal);\n  box-shadow: none;\n  transition: all 200ms ease-in;\n  border-radius: 0.75rem;\n\n  &:hover,\n  &:focus {\n    background: #ea684c;\n    box-shadow: 2px 4px 8px hsl(0deg 0% 0% / 0.25);\n  }\n`\n\nconst textByLang = {\n  fr: {\n    text: \"Si vous aimez le contenu de ce blog, ou bien qu'il vous a aidé, s'il vous plait, considérez donner à la fondation Abbé Pierre que je soutiens personnellement.\",\n    quote:\n      '“On n’est jamais heureux que dans le bonheur qu’on donne. Donner, c’est recevoir.”',\n  },\n  en: {\n    text: 'If you like some content of this blog, or it has helped you, please consider donating to the Abbé Pierre Foundation which I personally support.',\n    quote:\n      '\"We are only ever happy in the happiness we give. To give is to receive.\"',\n  },\n}\n\nexport const Foundation = ({ lang = 'en' }) => {\n  const logo = useStaticQuery(graphql`\n    {\n      img: file(\n        relativePath: { eq: \"abbe_pierre.jpeg\" }\n        sourceInstanceName: { eq: \"static_images\" }\n      ) {\n        childImageSharp {\n          fixed(quality: 60, height: 150) {\n            ...GatsbyImageSharpFixed_withWebp\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <StyledLink\n      id=\"foundation\"\n      to={`${lang === 'en' ? '' : '/fr'}/abbe-pierre`}\n    >\n      <TextWrapper>\n        {textByLang[lang].text}\n        <br />\n        <Blocquote>{textByLang[lang].quote}</Blocquote>\n      </TextWrapper>\n      <Logo\n        fixed={logo.img.childImageSharp.fixed}\n        alt=\"logo de la fondation abbé pierre\"\n      />\n    </StyledLink>\n  )\n}\n","import styled from 'styled-components'\nimport Img from 'gatsby-image'\n\nexport const Hero = styled(Img)`\n  border-radius: 0.75rem;\n  box-shadow: 2px 4px 8px hsl(0deg 0% 0% / 0.25);\n  max-width: 600px;\n  margin-left: auto;\n  margin-right: auto;\n`\n","import styled from 'styled-components'\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n`\n\nexport const ListItem = styled.li`\n  display: block;\n  margin: 0;\n  padding: 0;\n`\n","import React from 'react'\n\nexport const JsonLd = ({ content }) => (\n  <script\n    type=\"application/ld+json\"\n    dangerouslySetInnerHTML={{ __html: JSON.stringify(content) }}\n  />\n)\n","import styled from 'styled-components'\n\nexport const PageTitle = styled.h1`\n  font-size: 1.7rem;\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Aside = styled.aside`\n  display: none;\n  flex: 1;\n  min-width: 300px;\n  margin-left: 16px;\n  height: fit-content;\n\n  nav {\n    margin-left: 0.5rem;\n    overflow: auto;\n    max-height: 80vh;\n  }\n\n  ul {\n    list-style: none;\n  }\n\n  li {\n    margin-bottom: 0.5rem;\n    overflow: hidden;\n    white-space: nowrap;\n    ,wordwrap: normal;\n    text-overflow: ellipsis;\n  }\n\n  li > ul {\n    margin-top: 0;\n    margin-left: 1rem;\n  }\n\n  a {\n    color: currentColor;\n    box-shadow: none;\n  }\n\n  a:hover {\n    box-shadow: 0 1px 0 0 currentColor;\n  }\n\n  @media screen and (min-width: 1024px) {\n    & {\n      display: block;\n      position: sticky;\n      top: 80px;\n      font-size: 0.8rem;\n    }\n  }\n`\n\nconst Heading = styled.header`\n  margin-bottom: 0.8rem;\n  font-weight: bold;\n  font-size: 1.1rem;\n`\n\nexport const TableOfContents = ({ tableOfContents }) => (\n  <Aside id=\"table-of-content\">\n    <Heading>Table of content</Heading>\n    <nav dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n  </Aside>\n)\n","import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useLanguage = () =>\n  useStaticQuery(graphql`\n    query LanguageSwitcherQuery {\n      allMarkdownRemark(filter: { frontmatter: { type: { eq: \"language\" } } }) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              language\n              language_label\n              language_option\n            }\n          }\n        }\n      }\n    }\n  `)\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Helmet } from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { useLanguage } from '../lang/useLanguage'\n\nconst langCompleteByLang = {\n  fr: 'fr_FR',\n  en: 'en_US',\n}\n\nconst GlobalMarkup = ({\n  description,\n  lang,\n  meta,\n  title,\n  image,\n  translations,\n  slug,\n  type = 'website',\n  dateJson,\n  tags = [],\n}) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n  const langs = useLanguage()\n  const slugByLang = langs.allMarkdownRemark.edges.reduce(\n    (accumulator, { node }) => {\n      accumulator[node.frontmatter.language] = node.fields.slug\n      return accumulator\n    },\n    {}\n  )\n\n  const metaDescription =\n    `${description} ${(tags || []).join(', ')}` || site.siteMetadata.description\n  let imageTags = []\n  const translationTags = []\n  const metaTranslationTags = []\n\n  if (image) {\n    imageTags = [\n      {\n        property: 'og:image',\n        content: site.siteMetadata.siteUrl + image.src,\n      },\n      {\n        name: 'twitter:image',\n        content: site.siteMetadata.siteUrl + image.src,\n      },\n      {\n        property: 'og:image:alt',\n        content: title,\n      },\n      {\n        property: 'og:image:width',\n        content: 1080,\n      },\n      {\n        property: 'og:image:type',\n        content: 'image/jpeg',\n      },\n    ]\n  }\n\n  if (type === 'article') {\n    imageTags.push({\n      property: 'article:author',\n      content: 'Antoine Caron',\n    })\n    imageTags.push({\n      property: 'article:section',\n      content: 'Frontend Tech',\n    })\n\n    if (tags) {\n      tags.forEach((tag) => {\n        imageTags.push({\n          property: 'article:tag',\n          content: tag,\n        })\n      })\n    }\n  }\n\n  if (translations) {\n    for (let i = 0; i < translations.length; i += 2) {\n      translationTags.push({\n        rel: 'alternate',\n        hreflang: translations[i],\n        href: `${slugByLang[translations[i]]}${translations[i + 1]}`,\n      })\n      metaTranslationTags.push({\n        property: 'og:locale:alternate',\n        content: langCompleteByLang[translations[i]],\n      })\n    }\n    translationTags.push({\n      rel: 'alternate',\n      hreflang: lang,\n      href: `${slug}`,\n    })\n  }\n\n  if (dateJson) {\n    imageTags.push({\n      property: 'article:published_time',\n      content: dateJson,\n    })\n  }\n\n  if (tags) {\n    imageTags.push({\n      name: 'keywords',\n      content: tags,\n    })\n  }\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n        prefix:\n          'og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#',\n      }}\n      head\n      title={title}\n      link={translationTags}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        ...metaTranslationTags,\n        {\n          property: 'og:site_name',\n          content: 'Antoine Caron',\n        },\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:url',\n          content: `${site.siteMetadata.siteUrl}${slug}`,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: type,\n        },\n        {\n          property: 'og:locale',\n          content: langCompleteByLang[lang],\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary_large_image',\n        },\n        {\n          name: 'twitter:creator',\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n        ...imageTags,\n        {\n          name: 'google-site-verification',\n          content: 'h1uQ_z8fdlLI60AmxP8vjy1H-bKSDlv0n5XolWfeDIo',\n        },\n        {\n          property: 'fb:app_id',\n          content: '235346886871248',\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nGlobalMarkup.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: '',\n}\n\nGlobalMarkup.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default GlobalMarkup\n","import { Link } from 'gatsby'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { useLanguage } from './useLanguage'\n\nconst Container = styled.div`\n  padding: 1rem;\n  margin: 0.5rem 0;\n  font-weight: bold;\n  background-color: hsla(268, 53%, 51%, 30%);\n  border-radius: 0.75rem;\n  border: solid hsla(268, 53%, 51%) 1px;\n`\n\nexport const AvailableLanguages = ({ language, translations }) => {\n  const data = useLanguage()\n  const option = data.allMarkdownRemark.edges.find(\n    ({ node }) => node.frontmatter.language === language\n  ).node.frontmatter.language_option\n\n  return translations ? (\n    <Container id=\"lang-switcher\">\n      {option}:{' '}\n      {data.allMarkdownRemark.edges.map(({ node }) => {\n        if (node.frontmatter.language === language) {\n          return null\n        }\n        let translationLink = node.fields.slug\n        if (translations) {\n          const translationIndex = translations.findIndex(\n            (v) => v === node.frontmatter.language\n          )\n          if (translationIndex !== -1) {\n            translationLink += translations[translationIndex + 1]\n          }\n        }\n        return (\n          <Link\n            key={translationLink}\n            style={{\n              boxShadow: 'none',\n              textDecoration: 'none',\n            }}\n            to={translationLink}\n            hrefLang={node.frontmatter.language}\n          >\n            {node.frontmatter.language_label}\n          </Link>\n        )\n      })}\n    </Container>\n  ) : null\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Wrapper = styled.div`\n  margin-bottom: 1rem;\n`\n\nexport const EditOnGithubComponent = ({ slug }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          repository\n        }\n      }\n    }\n  `)\n\n  return (\n    <Wrapper>\n      <a\n        href={`${repository}/edit/source/src/pages${slug}index.md`}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Edit this page on Github\n      </a>\n    </Wrapper>\n  )\n}\n","export default __webpack_public_path__ + \"static/picture_of_me-cb64a6913d2e31dbb5dab1f4d113d077.jpg\";","import React from 'react'\nimport _get from 'lodash/get'\nimport { JsonLd } from './jsonLd'\nimport profilePic from '../../assets/picture_of_me.jpg'\n\nexport const PostMarkup = ({ post, slug, siteUrl }) => {\n  const image = _get(post, 'frontmatter.hero.childImageSharp', {\n    image16x9: {},\n    image4x3: {},\n    image1x1: {},\n  })\n  return (\n    <JsonLd\n      content={{\n        '@context': 'http://schema.org',\n        '@type': 'BlogPosting',\n        headline: post.frontmatter.title,\n        editor: 'Antoine Caron',\n        genre: 'Tech Blog',\n        wordcount: post.wordCount.words,\n        url: `${siteUrl}${slug}`,\n        mainEntityOfPage: `${siteUrl}${slug}`,\n        datePublished: post.frontmatter.dateJson,\n        dateCreated: post.frontmatter.dateJson,\n        dateModified: post.frontmatter.dateJson,\n        description: post.frontmatter.description,\n        image: [\n          `${siteUrl}${image.image16x9.src}`,\n          `${siteUrl}${image.image4x3.src}`,\n          `${siteUrl}${image.image1x1.src}`,\n        ],\n        keywords: post.frontmatter.tags,\n        author: {\n          '@type': 'Person',\n          name: 'Antoine Caron',\n          url: `${siteUrl}`,\n        },\n        publisher: {\n          '@type': 'Organization',\n          name: 'Antoine Caron',\n          logo: {\n            '@type': 'ImageObject',\n            url: `${siteUrl}${profilePic}`,\n          },\n        },\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport get from 'lodash/get'\nimport styled from 'styled-components'\n\nimport { Bio } from '../components/bio/bio.component'\nimport { Layout } from '../components/layout.component'\nimport { rhythm, scale } from '../utils/typography'\nimport { TableOfContents } from '../components/tableOfContents.component'\nimport GlobalMarkup from '../components/markup/global.markup'\nimport { AvailableLanguages } from '../components/lang/availableLanguages.component'\nimport { EditOnGithubComponent } from '../components/editOnGithub.component'\nimport { PostMarkup } from '../components/markup/post.markup'\nimport { Foundation } from '../components/foundation/foundation.component'\nimport { List, ListItem } from '../components/list.component'\nimport { Hero } from '../components/hero.component'\nimport { PageTitle } from '../components/pageTitle.component'\n\nconst PostContent = styled.main`\n  margin-top: 2rem;\n`\n\nconst RelatedPost = styled(ListItem)`\n  margin-left: 1rem;\n`\n\nconst Main = styled.main`\n  display: flex;\n`\n\nexport default function BlogPostTemplate({\n  data,\n  pageContext: { slug, language },\n  location,\n}) {\n  const post = data.markdownRemark\n  const siteBio = get(data, 'config.html')\n\n  return (\n    <Layout\n      location={location}\n      config={data.config}\n      translations={post.frontmatter.translations}\n      showHeader={false}\n      lang={language}\n    >\n      <GlobalMarkup\n        type=\"article\"\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n        lang={post.frontmatter.language}\n        translations={post.frontmatter.translations}\n        image={\n          post.frontmatter.hero\n            ? post.frontmatter.hero.childImageSharp.image\n            : null\n        }\n        slug={slug}\n        dateJson={post.frontmatter.dateJson}\n        tags={post.frontmatter.tags}\n      />\n\n      {post.frontmatter.hero && (\n        <Hero\n          fluid={post.frontmatter.hero.childImageSharp.fluid}\n          alt={post.frontmatter.title}\n        />\n      )}\n\n      <PageTitle style={{ color: 'var(--header)' }}>\n        {post.frontmatter.title}\n      </PageTitle>\n\n      <div\n        style={{\n          ...scale(-1 / 5),\n          marginBottom: rhythm(1),\n          marginTop: rhythm(-1),\n        }}\n      >\n        <time dateTime={post.frontmatter.dateJson}>\n          {post.frontmatter.date}\n        </time>\n        <small style={{ marginLeft: '1rem' }}>\n          {(post.frontmatter.tags || []).map((tag) => (\n            <Link\n              style={{ marginRight: '0.5rem' }}\n              key={tag}\n              to={`/${language}/${tag}`}\n            >\n              #{tag}\n            </Link>\n          ))}\n        </small>\n      </div>\n\n      <Main>\n        <div style={{ flex: '3', minWidth: '50vw', maxWidth: '70vw' }}>\n          <AvailableLanguages\n            language={language}\n            translations={post.frontmatter.translations}\n          />\n          <PostContent dangerouslySetInnerHTML={{ __html: post.html }} />\n          <PostMarkup\n            post={post}\n            slug={slug}\n            siteUrl={data.site.siteMetadata.siteUrl}\n          />\n          <EditOnGithubComponent slug={slug} />\n        </div>\n        {post.headings.length > 1 && (\n          <TableOfContents tableOfContents={post.tableOfContents} />\n        )}\n      </Main>\n\n      <hr\n        style={{\n          marginBottom: rhythm(1),\n        }}\n      />\n\n      <Bio>\n        <div dangerouslySetInnerHTML={{ __html: siteBio }} />\n      </Bio>\n      <Foundation lang={post.frontmatter.language} />\n\n      {data.relatedPosts.edges.length ? (\n        <aside>\n          <header>\n            <h2>Related posts:</h2>\n          </header>\n          <List>\n            {data.relatedPosts.edges.map(({ node }) => {\n              const title = get(node, 'frontmatter.title') || node.fields.slug\n              return (\n                <RelatedPost data-testid=\"related-post\" key={node.fields.slug}>\n                  <h3\n                    style={{\n                      marginBottom: rhythm(1 / 4),\n                    }}\n                  >\n                    <Link style={{ boxShadow: 'none' }} to={node.fields.slug}>\n                      {title}\n                    </Link>\n                  </h3>\n                  <span>\n                    <time dateTime={node.frontmatter.dateJson}>\n                      {node.frontmatter.date}\n                    </time>\n                  </span>\n                  <span style={{ margin: '0 1rem' }}>\n                    <span role=\"img\" aria-label=\"Time to read\">\n                      🕐\n                    </span>\n                    {node.timeToRead} min\n                  </span>\n                  <span>\n                    {(node.frontmatter.tags || []).map((tag) => (\n                      <Link\n                        style={{ marginRight: '0.5rem' }}\n                        key={tag}\n                        to={`/${language}/${tag}`}\n                      >\n                        #{tag}\n                      </Link>\n                    ))}\n                  </span>\n                  <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n                </RelatedPost>\n              )\n            })}\n          </List>\n        </aside>\n      ) : null}\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!, $language: String!, $tags: [String]) {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n    config: markdownRemark(\n      frontmatter: { language: { eq: $language }, type: { eq: \"language\" } }\n    ) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        language\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt\n      html\n      headings {\n        value\n      }\n      wordCount {\n        words\n      }\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        dateJson: date(formatString: \"YYYY-MM-DD\")\n        translations\n        description\n        language\n        tags\n        hero {\n          childImageSharp {\n            fluid(maxWidth: 600) {\n              ...GatsbyImageSharpFluid_withWebp_noBase64\n            }\n            image: fixed(fit: COVER, width: 1080, jpegProgressive: true) {\n              src\n            }\n            image16x9: fixed(width: 1080, height: 608) {\n              src\n            }\n            image4x3: fixed(\n              width: 1080\n              height: 810\n              cropFocus: CENTER\n              fit: CONTAIN\n              background: \"white\"\n            ) {\n              src\n            }\n            image1x1: fixed(\n              width: 800\n              height: 800\n              cropFocus: CENTER\n              fit: CONTAIN\n              background: \"white\"\n            ) {\n              src\n            }\n          }\n        }\n      }\n    }\n    relatedPosts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        fields: { slug: { ne: $slug } }\n        frontmatter: {\n          language: { eq: $language }\n          type: { eq: null }\n          tags: { in: $tags }\n        }\n      }\n      limit: 4\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            dateJson: date(formatString: \"YYYY-MM-DD\")\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["Wrapper","styled","Image","Img","Bio","children","component","picture","useStaticQuery","id","as","fixed","img","childImageSharp","style","margin","Logo","TextWrapper","Blocquote","StyledLink","Link","textByLang","fr","text","quote","en","Foundation","lang","logo","to","alt","Hero","List","ListItem","JsonLd","content","type","dangerouslySetInnerHTML","__html","JSON","stringify","PageTitle","Aside","Heading","TableOfContents","tableOfContents","useLanguage","langCompleteByLang","GlobalMarkup","description","meta","title","image","translations","slug","dateJson","tags","site","slugByLang","allMarkdownRemark","edges","reduce","accumulator","node","frontmatter","language","fields","metaDescription","join","siteMetadata","imageTags","translationTags","metaTranslationTags","property","siteUrl","src","name","push","forEach","tag","i","length","rel","hreflang","href","Helmet","htmlAttributes","prefix","head","link","titleTemplate","social","twitter","concat","defaultProps","Container","AvailableLanguages","data","option","find","language_option","map","translationLink","translationIndex","findIndex","v","key","boxShadow","textDecoration","hrefLang","language_label","EditOnGithubComponent","repository","target","PostMarkup","post","_get","image16x9","image4x3","image1x1","headline","editor","genre","wordcount","wordCount","words","url","mainEntityOfPage","datePublished","dateCreated","dateModified","keywords","author","publisher","profilePic","PostContent","RelatedPost","Main","BlogPostTemplate","pageContext","location","markdownRemark","siteBio","get","config","showHeader","excerpt","hero","fluid","color","scale","marginBottom","rhythm","marginTop","dateTime","date","marginLeft","marginRight","flex","minWidth","maxWidth","html","headings","relatedPosts","role","timeToRead"],"sourceRoot":""}